[{"path":"https://mjz1.github.io/scatools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 scatools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mjz1.github.io/scatools/articles/scatools.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scatools","text":"start loading scatools ArchR, well filepath example fragments.bed.gz file containing fragments 100 normal mammary cells. bed file generated using reformatFragmentFiles() function ArchR package. Note vignette currently set dummy normal data purely intended demonstrate package functionality. CNV changes test data.","code":""},{"path":"https://mjz1.github.io/scatools/articles/scatools.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"scatools","text":"can install development version scatools GitHub :","code":"devtools::install_github(\"mjz1/scatools\")"},{"path":"https://mjz1.github.io/scatools/articles/scatools.html","id":"example","dir":"Articles","previous_headings":"Introduction","what":"Example","title":"scatools","text":"start loading scatools, well filepath example fragments.bed.gz file containing fragments 100 normal mammary cells. bed file generated using reformatFragmentFiles() function ArchR package. Now process data using scatools. Helper functions help us create GenomicRanges bins, compute GC content downstream usage. demonstrate using 10Mb bins. convenience wrapper provided perform analysis Plot results using dittoSeq package.  can visualize results heatmap.  plot individual cells","code":"library(scatools) #> Warning: package 'GenomeInfoDb' was built under R version 4.3.3 #> Warning: replacing previous import 'S4Arrays::makeNindexFromArrayViewport' by #> 'DelayedArray::makeNindexFromArrayViewport' when loading 'SummarizedExperiment' library(BSgenome.Hsapiens.UCSC.hg38) #> Warning: package 'Biostrings' was built under R version 4.3.3 ncores <- 4 # Adjust accordingly  fragment_file <- system.file(\"extdata\", \"fragments.bed.gz\", package = \"scatools\") # Generate bins bins <- get_tiled_bins(bs_genome = BSgenome.Hsapiens.UCSC.hg38,                         tilewidth = 1e7,                         respect_chr_arms = TRUE                        )  # Get blacklist regions blacklist <- get_blacklist(genome = \"hg38\") sce <- run_scatools(   sample_id = \"test_sample\",   fragment_file = fragment_file,   blacklist = blacklist,   outdir = \"./example/\",   verbose = TRUE,   overwrite = TRUE,   ncores = ncores,   bins = bins ) library(dittoSeq) #> Loading required package: ggplot2 library(patchwork)  p1 <- dittoDimPlot(sce, var = \"clusters\") p2 <- dittoDimPlot(sce, var = \"tumor_cell\") + scale_color_manual(values = col_tumor_cells(), name = \"Tumor cell\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. p1 + p2 & theme(aspect.ratio = 1) library(ComplexHeatmap)  sce <- sce[, order(sce$tumor_cell, sce$clusters)]  col_clones <- dittoColors() col_clones <- col_clones[1:length(unique(sce[[\"clusters\"]]))] names(col_clones) <- levels(factor(sce[[\"clusters\"]]))   left_annot <- ComplexHeatmap::HeatmapAnnotation(   tumor_cell = sce[[\"tumor_cell\"]],   cnv_cluster = sce[[\"clusters\"]],   col = list(tumor_cell = col_tumor_cells(), cnv_cluster = col_clones),   which = \"row\" )   p_ht_cna <- cnaHeatmap(sce, assay_name = \"segment_merged_logratios\", clust_annot = left_annot, col_fun = logr_col_fun()) p_ht_cna # Plot the first five cells plot_cell_cna(sce = sce, cell_id = 1:5, assay_name = \"logr_modal\") #> Warning: Removed 9 rows containing missing values or values outside the scale range #> (`geom_segment()`)."},{"path":"https://mjz1.github.io/scatools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Zatzman. Author, maintainer.","code":""},{"path":"https://mjz1.github.io/scatools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zatzman M (2024). scatools: scATAC Tools Utilities Copy Number Analysis. R package version 0.1, https://mjz1.github.io/scatools/, https://github.com/mjz1/scatools.","code":"@Manual{,   title = {scatools: scATAC Tools and Utilities For Copy Number Analysis},   author = {Matthew Zatzman},   year = {2024},   note = {R package version 0.1, https://mjz1.github.io/scatools/},   url = {https://github.com/mjz1/scatools}, }"},{"path":"https://mjz1.github.io/scatools/index.html","id":"scatools","dir":"","previous_headings":"","what":"scATAC Tools and Utilities For Copy Number Analysis","title":"scATAC Tools and Utilities For Copy Number Analysis","text":"scatools package meant performing copy number analysis scATAC data.","code":""},{"path":"https://mjz1.github.io/scatools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"scATAC Tools and Utilities For Copy Number Analysis","text":"can install development version scatools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mjz1/scatools\")"},{"path":"https://mjz1.github.io/scatools/index.html","id":"user-guide","dir":"","previous_headings":"","what":"User Guide","title":"scATAC Tools and Utilities For Copy Number Analysis","text":"Please see documentation website","code":""},{"path":"https://mjz1.github.io/scatools/reference/EM2.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative phasing and theta_hat estimation — EM2","title":"Iterative phasing and theta_hat estimation — EM2","text":"Iterative phasing theta_hat estimation","code":""},{"path":"https://mjz1.github.io/scatools/reference/EM2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative phasing and theta_hat estimation — EM2","text":"","code":"EM2(ref_table, alt_table, max_iter = 50, seed = 3, phases = NULL, tol = 0.001)"},{"path":"https://mjz1.github.io/scatools/reference/EM2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative phasing and theta_hat estimation — EM2","text":"ref_table SNP cell read count matrix/ spare matrix reference alleles. alt_table SNP cell read count matrix/ spare matrix alternative alleles. max_iter integer maximum iteration number. seed integer random seed number EM initialization. phases SNP phasing use priors tol maximum liklihood stopping tolerance","code":""},{"path":"https://mjz1.github.io/scatools/reference/EM2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative phasing and theta_hat estimation — EM2","text":"list estimated indicators (I_hat) SNP estimated major haplotype proportion (theta_hat) cell one region. I_hat phasing result indicating whether reference allele major haplotype SNP. Theta_hat represents CNV states cell. cell considered CNV carrier theta_hat depart 0.5.","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Add GC correction to SCE Object — add_gc_cor","title":"Add GC correction to SCE Object — add_gc_cor","text":"Add GC correction SCE Object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add GC correction to SCE Object — add_gc_cor","text":"","code":"add_gc_cor(   sce,   gc = rowData(sce)$gc,   assay_name = \"counts\",   method = c(\"modal\", \"copykit\", \"loess\"),   verbose = FALSE,   ncores = 1,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add GC correction to SCE Object — add_gc_cor","text":"sce SCE object gc GC corresponding bins (rows) matrix assay_name Name assay perform GC correction method Specifies type GC correction perform. One 'modal', 'copykit', 'loess' verbose Message verbosity (TRUE/FALSE) ncores Number cores use parallel backend available ... Additional arguments passed GC correction methods","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add GC correction to SCE Object — add_gc_cor","text":"sce object corrected GC count matrix assay(sce, 'counts_gc_[method]'). See perform_gc_cor information.","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Add GC frequency — add_gc_freq","title":"Add GC frequency — add_gc_freq","text":"Add GC frequency","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add GC frequency — add_gc_freq","text":"","code":"add_gc_freq(bs_genome, bins)"},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add GC frequency — add_gc_freq","text":"bs_genome BSGenome object bins GRanges bins object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add GC frequency — add_gc_freq","text":"GRanges bin object GC N frequency per bin","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add HMMCopy results to sce object — add_hmmcopy","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"Add HMMCopy results sce object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"","code":"add_hmmcopy(   sce,   verbose = FALSE,   ncores = 1,   assay_name = paste0(\"counts_gc_\", sce@metadata$gc_cor_method),   save_raw_hmm = NULL,   slot_suffix = NULL,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"sce SCE object verbose Message verbosity ncores Number cores assay_name Name assay counts input HMMcopy. Ideally GC corrected. save_raw_hmm Path save raw hmm data rda file slot_suffix Suffix add newly created copy state assay slots. ... Additional parameters pass run_sc_hmmcopy, param","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"sce object hmm copy metadata added coldata, new slots copy state","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Add UMAP clusters to SCE — add_umap_clusters","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"Add UMAP clusters SCE","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"","code":"add_umap_clusters(   sce,   assay_name,   n_neighbors = 10,   min_dist = 0.1,   minPts = 30,   scale = c(\"none\", \"cells\", \"bins\", \"both\"),   name = \"UMAP\",   clone_colname = \"clone_id\",   log2 = FALSE,   seed = 3,   metric = \"correlation\",   verbose = TRUE,   force = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"sce SCE object assay_name Name assay use clustering n_neighbors size local neighborhood (terms number neighboring sample points) used manifold approximation. Larger values result global views manifold, smaller values result local data preserved. general values range 2 100. min_dist effective minimum distance embedded points. Smaller values result clustered/clumped embedding nearby points manifold drawn closer together, larger values result even dispersal points. value set relative spread value, determines scale embedded points spread . scale One 'cells', 'bins', '' 'none'. Determines kind scaling done. name String specifying name used store result reducedDims output. clone_colname Name clone column resulting sce object. log2 Logical: Log2 transform matrix prior plotting metric Type distance metric use find nearest neighbors. One   : \"euclidean\" (default) \"cosine\" \"manhattan\" \"hamming\" \"correlation\" (distance based Pearson correlation) \"categorical\" (see ) applies nn_method = \"annoy\" (nn_method = \"fnn\", distance metric always \"euclidean\"). X data frame matrix, multiple metrics can specified, passing list argument, name item list one metric names . value list item vector giving names integer ids columns included calculation, e.g. metric = list(euclidean = 1:4, manhattan = 5:10). metric calculation results separate fuzzy simplicial set, intersected together produce final set. Metric names can repeated. non-numeric columns removed data frame, safer use column names integer ids. Factor columns can also used specifying metric name \"categorical\". Factor columns treated different numeric columns although multiple factor columns can specified vector, factor column specified processed individually. specify non-factor column, coerced factor. given data block, may override pca pca_center arguments block, providing list one unnamed item containing column names ids, pca pca_center overrides named items, e.g. metric = list(euclidean = 1:4, manhattan = list(5:10, pca_center = FALSE)). exists allow mixed binary real-valued data included PCA applied , centering applied real-valued data (typical apply centering binary data PCA applied). verbose Logical: Message verbosity force Logical. Overwrite identical column names sce object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"SCE object umap results clones","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin atac fragments — bin_atac_frags","title":"Bin atac fragments — bin_atac_frags","text":"Convenience wrapper bin fragments given size save .mtx files","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin atac fragments — bin_atac_frags","text":"","code":"bin_atac_frags(   sample_id,   fragment_file,   bins,   bin_name,   blacklist = blacklist,   outdir,   ncores = 1,   bpparams = BiocParallel::MulticoreParam(workers = ncores, progressbar = TRUE),   overwrite = FALSE,   return_mat = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin atac fragments — bin_atac_frags","text":"fragment_file Fragment file bins Bins GRanges object bin_name Name bins (e.g. '10Mb', '500Kb', 'chr_arm'). provided automatically detected based binwidth. outdir Optional: Directory write .mtx, barcodes, bins files ncores Number cores use bpparams Options BPPARAM enable multithreading overwrite Logical. Overwrite previously existing results (default = FALSE) return_mat Logical. Return binned depth matrix (default = FALSE)","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin atac fragments — bin_atac_frags","text":"return_mat=TRUE, returns sparse binned depth matrix. Otherwise returns NULL","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin fragments from ArrowFile — bin_frags","title":"Bin fragments from ArrowFile — bin_frags","text":"Parallel enabled depth counting read fragments given genomic bins fragment files","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin fragments from ArrowFile — bin_frags","text":"","code":"bin_frags(   fragment_file,   bins,   blacklist = NULL,   outdir = NULL,   ncores = 1,   bpparams = BiocParallel::MulticoreParam(workers = ncores, progressbar = TRUE),   verbose = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin fragments from ArrowFile — bin_frags","text":"fragment_file Fragment file bins Bins GRanges object outdir Optional: Directory write .mtx, barcodes, bins files ncores Number cores use bpparams Options BPPARAM enable multithreading verbose Logical. Message verbosity ... Additional arguments passed bplapply","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin fragments from ArrowFile — bin_frags","text":"Binned depth sparse matrix","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin scATAC fragments — bin_frags_chr","title":"Bin scATAC fragments — bin_frags_chr","text":"bin_frags_chr computes fragments across bins single chromosome ArchR ArrowFile","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin scATAC fragments — bin_frags_chr","text":"","code":"bin_frags_chr(chrom, bins, blacklist = NULL, fragment_file)"},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin scATAC fragments — bin_frags_chr","text":"chrom single chromosome compute depth information bins list bins (can include chromosomes) fragment_file Path fragment file bin","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin scATAC fragments — bin_frags_chr","text":"Sparse matrix binned fragment counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin scATAC fragments — bin_frags_chr","text":"","code":"if (FALSE) { dp_mat <- bin_frags_chr(chrom = \"chr1\", bins = get_chr_arm_bins(\"hg38\"), ArrowFile = ArrowFile) }"},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin SNPs into genomic segments — bin_snp_data","title":"Bin SNPs into genomic segments — bin_snp_data","text":"Bin SNPs genomic segments Title","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin SNPs into genomic segments — bin_snp_data","text":"","code":"bin_snp_data(snp_sce, binsize = 5e+05, select_chrs = NULL, bins = NULL)  bin_snp_data(snp_sce, binsize = 5e+05, select_chrs = NULL, bins = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin SNPs into genomic segments — bin_snp_data","text":"binsize Size bins select_chrs Chromosomes include bins Optional override bins snp SingleCellExperiment SNP object generated read_vartrix snp_granges SNP granges object GT column","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin SNPs into genomic segments — bin_snp_data","text":"SCE object binned SNPs SCE object phased binned snps","code":""},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind sublists within lists — bind_sublist","title":"Bind sublists within lists — bind_sublist","text":"Helper function lists lists, top level list multiple samples, sublists results identical across samples one wishes bind","code":""},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind sublists within lists — bind_sublist","text":"","code":"bind_sublist(   toplist,   sublist,   what = c(\"rbind\", \"cbind\", \"c\"),   .add_id = FALSE,   .id_name = \"id\" )"},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind sublists within lists — bind_sublist","text":"toplist List lists rbindable data sublist Name index sublist Specify either cbind rbind (Currently rbind implemented) .add_id Add identifiers data entry prior merging. Based list names available. (default=FALSE) .id_name Name id column added","code":""},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind sublists within lists — bind_sublist","text":"","code":"toplist <- list(   sample_1 = list(     result1 = data.frame(       a = c(1, 2, 3),       b = c(\"X\", \"Y\", \"Z\")     ),     result2 = data.frame(       height = 180,       weight = 75     )   ),   sample_2 = list(     result1 = data.frame(       a = c(6, 5, 4),       b = c(\"A\", \"B\", \"C\")     ),     result2 = data.frame(       height = 155,       weight = 60     )   ) )  bind_sublist(toplist, sublist = 1, what = \"rbind\", .add_id = TRUE) #>         id a b #> 1 sample_1 1 X #> 2 sample_1 2 Y #> 3 sample_1 3 Z #> 4 sample_2 6 A #> 5 sample_2 5 B #> 6 sample_2 4 C  bind_sublist(toplist, sublist = \"result2\", what = \"rbind\", .add_id = TRUE) #>         id height weight #> 1 sample_1    180     75 #> 2 sample_2    155     60  bind_sublist(toplist, sublist = 2, what = \"rbind\", .add_id = FALSE) #>   height weight #> 1    180     75 #> 2    155     60"},{"path":"https://mjz1.github.io/scatools/reference/bins_10mb.html","id":null,"dir":"Reference","previous_headings":"","what":"10mb Bins for HG38 — bins_10mb","title":"10mb Bins for HG38 — bins_10mb","text":"subset cells normal mammary","code":""},{"path":"https://mjz1.github.io/scatools/reference/bins_10mb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"10mb Bins for HG38 — bins_10mb","text":"","code":"bins_10mb"},{"path":[]},{"path":"https://mjz1.github.io/scatools/reference/bins_10mb.html","id":"bins-mb","dir":"Reference","previous_headings":"","what":"bins_10mb","title":"10mb Bins for HG38 — bins_10mb","text":"GenomicRanges object 331 bins.","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_ai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate allelic imbalance — calc_ai","title":"Calculate allelic imbalance — calc_ai","text":"Calculate allelic imbalance","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_ai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate allelic imbalance — calc_ai","text":"","code":"calc_ai(ref_counts, alt_counts)"},{"path":"https://mjz1.github.io/scatools/reference/calc_ai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate allelic imbalance — calc_ai","text":"ref_counts vector ref counts alt_counts vector alt counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_ai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate allelic imbalance — calc_ai","text":"measure allelic imbalance","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_ai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate allelic imbalance — calc_ai","text":"","code":"calc_ai(c(4, 2, 1), c(2, 3, 1)) #> [1] 0.5000000 0.3333333 0.0000000"},{"path":"https://mjz1.github.io/scatools/reference/calc_allelic.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate allelic information over cells and bins — calc_allelic","title":"Calculate allelic information over cells and bins — calc_allelic","text":"Calculate allelic information cells bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_allelic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate allelic information over cells and bins — calc_allelic","text":"","code":"calc_allelic(   snp,   ncores = 1,   bins = NULL,   group_var = NULL,   FUN = calc_ai,   min_cov = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/calc_allelic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate allelic information over cells and bins — calc_allelic","text":"snp SNP SingleCellExperiment object slots 'ref' 'alt' per cell counts ncores Number cores speed computation bins Bins aggregate allele information. provided calculate SNP group_var Column containing cell grouping information FUN function can take two values (vectors) reference alternate counts produce another value (vector) min_cov Minumum coverage per SNP across pseudobulked cells included calculation","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_allelic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate allelic information over cells and bins — calc_allelic","text":"snp sce slots: snp - Containing main result tot_cov - Total SNP coverage bin set cells filtering min_cov n_snp - Number SNPs remaining bin filtering min_cov","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_clonal_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate clonal diversity — calc_clonal_diversity","title":"Calculate clonal diversity — calc_clonal_diversity","text":"Calculate clonal diversity","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_clonal_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate clonal diversity — calc_clonal_diversity","text":"","code":"calc_clonal_diversity(sce, sample_column, clone_name, index = \"shannon\")"},{"path":"https://mjz1.github.io/scatools/reference/calc_clonal_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate clonal diversity — calc_clonal_diversity","text":"sce sce sample_column sample clone_name clone index diversity index use. See vegan::diversity","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_clonal_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate clonal diversity — calc_clonal_diversity","text":"named list","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_cnv_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CNV Score — calc_cnv_score","title":"Calculate CNV Score — calc_cnv_score","text":"Calculates CNV score given assay using absolute mean CNV values.","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_cnv_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CNV Score — calc_cnv_score","text":"","code":"calc_cnv_score(sce, assay_name = \"counts\", name = \"cnv_score\", method = \"abs\")"},{"path":"https://mjz1.github.io/scatools/reference/calc_cnv_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CNV Score — calc_cnv_score","text":"sce SingleCellExperiment object assay_name Name assay name Name new column store cnv score method 'rms' root mean square 'abs' absolute mean","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_cnv_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CNV Score — calc_cnv_score","text":"SCE object cnv_score appended","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_snn_specificity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SNN Specificity — calc_snn_specificity","title":"Calculate SNN Specificity — calc_snn_specificity","text":"Calculates fraction nearest neighbours divided expected fraction nearest neighbours patient subgraph.","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_snn_specificity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SNN Specificity — calc_snn_specificity","text":"","code":"calc_snn_specificity(   snn_graph,   cell_idents1,   cell_idents2,   sampling_rate = 0.1,   weighted = T,   ncores = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/calc_snn_specificity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SNN Specificity — calc_snn_specificity","text":"snn_graph SNN matrix cell_idents1 Vector cell identities specificity calculated . Ideally sample patient. cell_idents2 Vector cell identities define cell types states. variable want see factor specific cell_idents1. sampling_rate Proportion cells subsample performing calculations. weighted Logical. Whether weight identities inverse size. relevent neighbor purity estimated ncores Number cores use","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_snn_specificity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate SNN Specificity — calc_snn_specificity","text":"dataframe","code":""},{"path":"https://mjz1.github.io/scatools/reference/calc_snn_specificity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate SNN Specificity — calc_snn_specificity","text":"Also computes neighbor purity estimation identity.","code":""},{"path":"https://mjz1.github.io/scatools/reference/cluster_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster using Seurat — cluster_seurat","title":"Cluster using Seurat — cluster_seurat","text":"Cluster using Seurat","code":""},{"path":"https://mjz1.github.io/scatools/reference/cluster_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster using Seurat — cluster_seurat","text":"","code":"cluster_seurat(   sce,   assay_name,   do.scale = FALSE,   do.center = FALSE,   algorithm = 1,   resolution = 0.8,   n.neighbors = 10,   npcs.pca = 50,   features.pca = \"all\",   nvar.features = NULL,   dims = 1:npcs.pca,   k.param = 20,   suffix = \"\",   PCA_name = paste0(\"PCA\", suffix),   UMAP_name = paste0(\"UMAP\", suffix),   cluster_name = paste0(\"clusters\", suffix),   umap.metric = \"correlation\",   annoy.metric = \"cosine\",   verbose = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/cluster_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster using Seurat — cluster_seurat","text":"sce SingleCellExperiment object assay_name Assay name. Can provide two assay names perform joint clustering across .scale scale .center center algorithm clustering algorithm resolution clustering resolution n.neighbors neighbors umap npcs.pca Total Number PCs compute store (50 default) features.pca One '', 'variable', vector features include dimensionality reduction. Defaults ''. nvar.features Number variable features features.pca='variable' dims Number reduced dimensions use FindNeighbors UMAP k.param Defines k k-nearest neighbor algorithm suffix Suffix name add PCA, UMAP, clusters PCA_name Name store PCA dimred UMAP_name Name store UMAP dimred cluster_name Name store seurat clusters umap.metric Metric Seurat::RunUMAP annoy.metric Metric Seurat::FindNeighbors verbose Message verbosity","code":""},{"path":"https://mjz1.github.io/scatools/reference/cluster_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster using Seurat — cluster_seurat","text":"SingleCellExperiment obj","code":""},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot copy number heatmap — cnaHeatmap","title":"Plot copy number heatmap — cnaHeatmap","text":"Plot copy number heatmap","code":""},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot copy number heatmap — cnaHeatmap","text":"","code":"cnaHeatmap(   sce,   assay_name = \"state\",   clone_name = NULL,   cluster_cells = FALSE,   log2 = FALSE,   center = FALSE,   scale = c(\"none\", \"cells\", \"bins\", \"both\"),   label_genes = NULL,   col_fun = NULL,   col_clones = NULL,   cluster_clones = FALSE,   legend_name = assay_name,   clust_annot = TRUE,   verbose = TRUE,   top_annotation = NULL,   bulk_cn_col = NULL,   raster_quality = 10,   row_split = NULL,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot copy number heatmap — cnaHeatmap","text":"sce SingleCellExperiment object assay_name Name assay plot clone_name Name clone_id column sce object cluster_cells value logical, controls whether make cluster rows. value can also stats::hclust stats::dendrogram already contains clustering. Note override ordering specified clones. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#clustering. log2 Logical: Log2 transform matrix prior plotting center logical: center matrix prior plotting scale One 'cells', 'bins', '' 'none'. Determines kind scaling done. label_genes Optional: Vector gene names label heatmap. Note: overlap_genes must run prior labelling genes. col_fun Color mapping function circlize::colorRamp2() col_clones Optional: named vector (unnamed) clone colors. cluster_clones Logical: Whether order clones clustering legend_name Name legend clust_annot Annotate cluster sample labels verbose Logical: Message verbosity bulk_cn_col Name column rowRanges(sce) contains bulk copy number data plot top heatmap raster_quality Quality raster (default: 10) ... Additional parameters can passed ComplexHeatmap::Heatmap()","code":""},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot copy number heatmap — cnaHeatmap","text":"heatmap","code":""},{"path":"https://mjz1.github.io/scatools/reference/correct_atac_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct ATAC Bias — correct_atac_bias","title":"Correct ATAC Bias — correct_atac_bias","text":"Correct ATAC signal bias cancer sample using bulk copy number profile. First, copy number profile interest (granges format) integrated bin sizes provided input SingleCellExperiment object. copy number profile divided input counts averaged across cells approximate amount atac specific bias. input counts divided bias measure yield corrected counts.","code":""},{"path":"https://mjz1.github.io/scatools/reference/correct_atac_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct ATAC Bias — correct_atac_bias","text":"","code":"correct_atac_bias(   sce,   assay_name,   corrected_name = \"counts_corrected\",   cn_granges = NULL,   granges_signal_colname,   drop_missing_bins = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/correct_atac_bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct ATAC Bias — correct_atac_bias","text":"sce Single cell experiment object assay_name Name assay correct corrected_name Name corrected assay cn_granges GRanges object containing bulk sample copy number information. required data already integrated. granges_signal_colname Column cn_granges contains copy number information. drop_missing_bins Logical: Drop bins missing information cn_granges.","code":""},{"path":"https://mjz1.github.io/scatools/reference/correct_atac_bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct ATAC Bias — correct_atac_bias","text":"SingleCellExperiment object containing slots bias counts_corrected.","code":""},{"path":"https://mjz1.github.io/scatools/reference/disjoint_bins_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map between bins — disjoint_bins_map","title":"Map between bins — disjoint_bins_map","text":"return mapping x y bins using disjoin function. results can used map bins together taking weighted mean disjoint_width","code":""},{"path":"https://mjz1.github.io/scatools/reference/disjoint_bins_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map between bins — disjoint_bins_map","text":"","code":"disjoint_bins_map(x, y)"},{"path":"https://mjz1.github.io/scatools/reference/disjoint_bins_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map between bins — disjoint_bins_map","text":"x x Granges y y Granges","code":""},{"path":"https://mjz1.github.io/scatools/reference/disjoint_bins_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map between bins — disjoint_bins_map","text":"data frame bin mapping","code":""},{"path":"https://mjz1.github.io/scatools/reference/do_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic QC — do_qc","title":"Basic QC — do_qc","text":"Basic QC","code":""},{"path":"https://mjz1.github.io/scatools/reference/do_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic QC — do_qc","text":"","code":"do_qc(sce, assay_name = \"counts\", plot = TRUE)"},{"path":"https://mjz1.github.io/scatools/reference/do_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic QC — do_qc","text":"sce sce assay_name assay plot logical plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/do_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic QC — do_qc","text":"sce","code":""},{"path":"https://mjz1.github.io/scatools/reference/filter_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin and/or Cell-wise quality filtering — filter_sce","title":"Bin and/or Cell-wise quality filtering — filter_sce","text":"Note -- filters GC bins, bins counts, cells. denominator changes step.","code":""},{"path":"https://mjz1.github.io/scatools/reference/filter_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin and/or Cell-wise quality filtering — filter_sce","text":"","code":"filter_sce(   sce,   assay_name = \"counts\",   which = c(\"bins\", \"cells\"),   min_bin_counts = 1,   min_bin_prop = 0.95,   min_cell_counts = min_bin_counts,   min_cell_prop = min_bin_prop,   flag_only = FALSE,   gc_range = c(-Inf, Inf) )"},{"path":"https://mjz1.github.io/scatools/reference/filter_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin and/or Cell-wise quality filtering — filter_sce","text":"sce SingleCellExperiment object assay_name Name assay pull counts . Ideally raw counts min_bin_counts bin requires least min_bin_counts across min_bin_prop proportion cells kept min_bin_prop Minimum proportion cells least min_bin_counts per bin order keep bin min_cell_counts cell requires least min_cell_counts across min_cell_prop proportion bins kept min_cell_prop Minimum proportion bins least min_cell_counts per cell order keep cell flag_only flag cells/bins, remove gc_range Min max GC values per bin keep filt Filter cells bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/filter_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin and/or Cell-wise quality filtering — filter_sce","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/flagDoublets.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag doublets — flagDoublets","title":"Flag doublets — flagDoublets","text":"function modified ArchR::filterDoublets enable flagging doublets prior removal.","code":""},{"path":"https://mjz1.github.io/scatools/reference/flagDoublets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag doublets — flagDoublets","text":"","code":"flagDoublets(   sce,   cutEnrich = 1,   cutScore = -Inf,   filterRatio = 1,   remove = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/flagDoublets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag doublets — flagDoublets","text":"sce SingleCellExperiment object. cutEnrich minimum numeric cutoff DoubletEnrichment. number equivalent number simulated doublets identified nearest neighbor cell divided expected number given random uniform distribution. cutScore minimum numeric cutoff DoubletScore represents -log10(binomial adjusted p-value) DoubletEnrichment. filterRatio maximum ratio predicted doublets filter based number pass-filter cells. example, 5000 cells, maximum filterRatio * 5000^2 / (100000) (simplifies filterRatio * 5000 * 0.05). filterRatio allows apply consistent filter across multiple different samples may different percentages doublets run different cell loading concentrations. higher filterRatio, greater number cells potentially removed doublets. remove Logical. Whether remove doublets object.","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal regression GC Correction for single cell data — gc_cor_modal","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"Modal regression GC Correction single cell data","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"","code":"gc_cor_modal(   counts,   gc,   valid = rep(TRUE, length(counts)),   bin_ids = names(counts),   lowess_frac = 0.2,   q = c(0.1, 0.9),   g = c(0.1, 0.9),   results = c(\"counts\", \"default\", \"full\") )"},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"counts Vector counts bins gc Vector GC content bins valid Vector values corresponding valid bins. none provided defaults TRUE bin_ids Bin ids lowess_frac smoother span. See stats::lowess() details q tuple quantile bounds compute quantile regressions read counts g GC quantiles integrate regression curves results Format results return. One full, default, counts.","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"dataframe modal quantile GC corrected counts. Results returned based results parameter follows: full Full dataframe containing results quantile curve default Condensed dataframe selected modal quantile curve counts Return vector corrected counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_modal_qc_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"GC modal QC filter — gc_modal_qc_filter","title":"GC modal QC filter — gc_modal_qc_filter","text":"Removes cells high numbers NA bins GC modal correction","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_modal_qc_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC modal QC filter — gc_modal_qc_filter","text":"","code":"gc_modal_qc_filter(   sce,   assay = \"counts_gc_modal\",   filter_prop = 0.05,   verbose = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/gc_modal_qc_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC modal QC filter — gc_modal_qc_filter","text":"sce SingleCellExperiment object assay Assay containing GC modal corrected counts filter_prop Filter proportion keep cells less X% NA verbose Logical. Message verbosity","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_modal_qc_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC modal QC filter — gc_modal_qc_filter","text":"Filtered SingleCellExperiment","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_assay_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to pull assay data and merge with features — get_assay_dat","title":"Utility to pull assay data and merge with features — get_assay_dat","text":"Utility pull assay data merge features","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_assay_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to pull assay data and merge with features — get_assay_dat","text":"","code":"get_assay_dat(sce, assay_names, cell_id = colnames(sce))"},{"path":"https://mjz1.github.io/scatools/reference/get_assay_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to pull assay data and merge with features — get_assay_dat","text":"sce SingleCellExperiment object cell_id Cell id grab data assays Vector list assays","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_assay_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility to pull assay data and merge with features — get_assay_dat","text":"data frame merged data","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_blacklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get blacklist regions — get_blacklist","title":"Get blacklist regions — get_blacklist","text":"Get blacklist regions","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_blacklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get blacklist regions — get_blacklist","text":"","code":"get_blacklist(genome = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/get_blacklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get blacklist regions — get_blacklist","text":"genome Genome version: hg38, hg19, mm10, ce10, dm3","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_blacklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get blacklist regions — get_blacklist","text":"Genomic ranges blacklist regions","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chromosome arm bins — get_chr_arm_bins","title":"Get chromosome arm bins — get_chr_arm_bins","text":"Get chromosome arm bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chromosome arm bins — get_chr_arm_bins","text":"","code":"get_chr_arm_bins(genome = \"hg38\", calc_gc = FALSE, bs_genome = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chromosome arm bins — get_chr_arm_bins","text":"genome Genome version ('hg38', 'hg19') calc_gc Logical: Whether calculate GC content per bin bs_genome BSgenome object. Must passed calc_gc set TRUE","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chromosome arm bins — get_chr_arm_bins","text":"GRanges object chromosome arm bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chromosome arm bins — get_chr_arm_bins","text":"","code":"bins <- get_chr_arm_bins(\"hg38\")"},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genome cytobands — get_cytobands","title":"Get genome cytobands — get_cytobands","text":"Get genome cytobands","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genome cytobands — get_cytobands","text":"","code":"get_cytobands(genome = \"hg38\")"},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genome cytobands — get_cytobands","text":"genome Genome version (hg38, hg19, mm10)","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genome cytobands — get_cytobands","text":"Dataframe genome cytobands","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genome cytobands — get_cytobands","text":"","code":"hg38_cyto <- get_cytobands(\"hg38\")"},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get factor indices — get_f_idx","title":"Get factor indices — get_f_idx","text":"Get factor indices","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get factor indices — get_f_idx","text":"","code":"get_f_idx(f)"},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get factor indices — get_f_idx","text":"f factor","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get factor indices — get_f_idx","text":"named list indices factor level","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_gene_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Copies — get_gene_copy","title":"Get Gene Copies — get_gene_copy","text":"Calculate per group copy number list genes.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_gene_copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Copies — get_gene_copy","text":"","code":"get_gene_copy(   sce,   assay_name,   group_var = \"all\",   gain_cutoff = 0.75,   loss_cutoff = -gain_cutoff,   clonal_thr = 0.75,   gene_names = NULL,   cancer_genes = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/get_gene_copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Copies — get_gene_copy","text":"sce Single cell experiment object assay_name Name assay pull copy number group_var Grouping variable (defaults ) gain_cutoff Relative copy increase considered copy gain loss_cutoff Relative copy decrease considered copy loss clonal_thr Proportion clones harboring gain loss considered clonal gene_names List genes get copy number cancer_genes Logical. Whether include results cancer genes. Default=TRUE.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_gene_copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Copies — get_gene_copy","text":"list three elements: copy Wide form data frame one row per  gene, columns reflecting average per clone copy, relative copy increase decrease versus clone average copy, clone average copy copy_long melted version copy clonal filtered version copy_long classifies mutation private, shared, clonal, whether type gain loss matches gene's oncogene tumor suppressor type.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ideal bin matrix — get_ideal_mat","title":"Get ideal bin matrix — get_ideal_mat","text":"Given matrix bin counts, bin gc N frequency, filtering parameters, return boolean matrix flagging ideal bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ideal bin matrix — get_ideal_mat","text":"","code":"get_ideal_mat(   mat,   gc,   n_freq,   map,   min_reads = 1,   max_N_freq = 0.05,   reads_outlier = 0.01,   gc_outlier = 0.001,   min_map = 0.9,   ncores = 1,   verbose = FALSE )  add_ideal_mat(   sce,   assay_name = \"counts\",   gc = rowData(sce)$gc,   n_freq = rowData(sce)$n_freq,   map = rowData(sce)$map,   min_reads = 1,   max_N_freq = 0.05,   reads_outlier = 0.01,   gc_outlier = 0.001,   min_map = 0.9,   ncores = 1,   verbose = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ideal bin matrix — get_ideal_mat","text":"mat, sce count matrix SCE object depending function gc Vector gc content n_freq Vector bin N frequency (proportion N bases bin) map Vector bin mappability min_reads Minimum number reads consider bin max_N_freq Maximum allowable frequency N bases consider bin. Range (0, 1) reads_outlier Flag bins reads top quantile given value. Range (0, 1) gc_outlier Flag bins GC content top bottom quantule given value. Range (0, 1) min_map Minimum allowable mappability score bin. Range (0, 1) ncores number cores parallel evaluation (requires pbmcapply package)","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ideal bin matrix — get_ideal_mat","text":"Boolean matrices ideal valid bins SCE object ideal valid boolean matrices","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_bidx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNP bin idx — get_snp_bidx","title":"Get SNP bin idx — get_snp_bidx","text":"Get SNP bin idx","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_bidx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNP bin idx — get_snp_bidx","text":"","code":"get_snp_bidx(   snp,   tilewidth = 1e+07,   respect_chr_arms = FALSE,   select_chrs = NULL,   bs_genome = NULL,   bins = get_tiled_bins(bs_genome = bs_genome, tilewidth = tilewidth, select_chrs =     select_chrs, respect_chr_arms = respect_chr_arms),   merge_cols = NULL )"},{"path":"https://mjz1.github.io/scatools/reference/get_snp_bidx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNP bin idx — get_snp_bidx","text":"snp SingleCellExperiment SNP object generated read_vartrix tilewidth Bin size respect_chr_arms logical TRUE, bins created respect chromosome arms (ie. crossing arm boundries) select_chrs Chromosomes include bs_genome BSgenome object bins Optional override bins merge_cols Vector columns bins append snp ranges.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_bidx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SNP bin idx — get_snp_bidx","text":"SingleCellExperiment object SNPs bin idx snp","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"get_snp_counts — get_snp_counts","title":"get_snp_counts — get_snp_counts","text":"Computes per feature counts across dataset. Equivalent pseudobulk summarization.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_snp_counts — get_snp_counts","text":"","code":"get_snp_counts(sce, variables = \"all\", target_assays = c(\"ref\", \"alt\"))"},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_snp_counts — get_snp_counts","text":"sce SingleCellExperiment object one assays variables Factors upon split counts. Defaults '' counts across entire dataset target_assays Assays sce count","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_snp_counts — get_snp_counts","text":"SingleCellExperiment object named counts assay rowData(sce) slot.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_snp_counts — get_snp_counts","text":"","code":"if (FALSE) { sce <- get_snp_counts(sce,   variables = c(\"all\", \"Sample\", \"Condition\"),   target_assays = c(\"ref\", \"alt\") ) }"},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tiled bins — get_tiled_bins","title":"Get tiled bins — get_tiled_bins","text":"Get tiled bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tiled bins — get_tiled_bins","text":"","code":"get_tiled_bins(   bs_genome = NULL,   tilewidth = 5e+05,   select_chrs = NULL,   respect_chr_arms = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tiled bins — get_tiled_bins","text":"bs_genome BSgenome object tilewidth Bin size select_chrs Vector chromosomes include respect_chr_arms logical TRUE, bins created respect chromosome arms (ie. crossing arm boundries)","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tiled bins — get_tiled_bins","text":"GRanges object bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tiled bins — get_tiled_bins","text":"","code":"if (FALSE) { bins <- get_tiled_bins(BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38, tilewidth = 500000) }"},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab HMM results from returned list — grab_hmm_res","title":"Grab HMM results from returned list — grab_hmm_res","text":"Helper function parse large list HMM results","code":""},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab HMM results from returned list — grab_hmm_res","text":"","code":"grab_hmm_res(hmm_results, grab = \"best\", ncores = 1)"},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab HMM results from returned list — grab_hmm_res","text":"hmm_results hmm results multilist format grab grab (\"best\" best results; m1, m2, m3...specific multiplier) ncores number cores parallelization","code":""},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab HMM results from returned list — grab_hmm_res","text":"list cells best result\\","code":""},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grab HMM results from returned list — grab_hmm_res","text":"Note: Parallel currently disabled seems slower single core","code":""},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Cell HMMcopy — hmmcopy_singlecell","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"Runs HMMCopy single cell binned counts.","code":""},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"","code":"hmmcopy_singlecell(   chr,   start,   end,   counts,   reads,   ideal = rep(TRUE, length(counts)),   param = params_sc_hmm(),   cell_id,   multiplier = 1,   verbose = FALSE,   maxiter = 200,   n_cutoff = NULL )"},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"chr Vector chromosomes start Vector bin start positions end Vector bin end positions counts Vector bin corrected counts. ideally GC corrected counts gc_cor_modal() reads vector raw read counts per bin ideal logical vector indicating bins ideal analysis. See is_ideal_bin() param matrix parameter values columns state rows. See HMMcopy::HMMsegment() information. cell_id Cell id multiplier Ploidy multiplier verbose Print verbose maxiter maximum number iterations allows Maximum-Expectation algorithm, reduce decrease running time expense robustness. n_cutoff Cutoff number bins given state calculating true_multiplier value. Defaults 5% bins.","code":""},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"list following objects: bincounts Data frame bin counts copy state modal_seg Data frame genome segments mstats single row cell summary statistics df_params Data frame parameters used iteration state","code":""},{"path":"https://mjz1.github.io/scatools/reference/identify_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify normal cells from scATAC data — identify_normal","title":"Identify normal cells from scATAC data — identify_normal","text":"Uses standard deviation difference bin estimate tumor normal cell clusters. Using method gmm calculate per cluster median sd, fit two-component GMM determine tumor cells. method min_sd specified (two clusters provided), simply uses n_normal_clusts lowest median sd.","code":""},{"path":"https://mjz1.github.io/scatools/reference/identify_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify normal cells from scATAC data — identify_normal","text":"","code":"identify_normal(   sce,   assay_name,   group_by = \"clusters\",   method = c(\"gmm\", \"min_sd\"),   n_normal_clusts = NULL,   plot = TRUE,   use_cnv_score = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/identify_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify normal cells from scATAC data — identify_normal","text":"sce SingleCellExperiment Object assay_name Name assay calculate metrics . highly recommended segmented merged data. group_by Name column containing grouping information method One gmm min_sd n_normal_clusts Number expected normal clusters (method min_sd) plot Plot cluster scores tumor/normal identifications use_cnv_score Also use CNV score (absolute mean assay)","code":""},{"path":"https://mjz1.github.io/scatools/reference/identify_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify normal cells from scATAC data — identify_normal","text":"SingleCellExperiment object column tumor_cell","code":""},{"path":"https://mjz1.github.io/scatools/reference/integrate_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate segments between assays — integrate_segments","title":"Integrate segments between assays — integrate_segments","text":"merge bins y x, taking weighted mean binned signal y granges_signal_colname","code":""},{"path":"https://mjz1.github.io/scatools/reference/integrate_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate segments between assays — integrate_segments","text":"","code":"integrate_segments(x, y, granges_signal_colname, drop_na = TRUE)"},{"path":"https://mjz1.github.io/scatools/reference/integrate_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate segments between assays — integrate_segments","text":"x granges object integrate y granges granges_signal_colname column containing cna signal granges drop_na Logical. Drop bins NA values.","code":""},{"path":"https://mjz1.github.io/scatools/reference/integrate_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate segments between assays — integrate_segments","text":"x averaged signal y integrated bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag ideal bins — is_ideal_bin","title":"Flag ideal bins — is_ideal_bin","text":"is_ideal_bin apply set bin-wise filters, based high count outliers, high low gc outliers, minimum read counts, minimum mappability, maximum allowable frequency N bases per bin.","code":""},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag ideal bins — is_ideal_bin","text":"","code":"is_ideal_bin(   counts,   gc,   n_freq,   map = NULL,   min_reads = 0,   max_N_freq = 0.05,   reads_outlier = 0.01,   gc_outlier = 0.001,   min_map = 0.9 )"},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag ideal bins — is_ideal_bin","text":"counts Vector bin counts single cell gc Vector gc content n_freq Vector bin N frequency (proportion N bases bin) map Vector bin mappability min_reads Minimum number reads consider bin max_N_freq Maximum allowable frequency N bases consider bin. Range (0, 1) reads_outlier Flag bins reads top quantile given value. Range (0, 1) gc_outlier Flag bins GC content top bottom quantule given value. Range (0, 1) min_map Minimum allowable mappability score bin. Range (0, 1)","code":""},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag ideal bins — is_ideal_bin","text":"dataframe two columns meet valid ideal criteria","code":""},{"path":"https://mjz1.github.io/scatools/reference/leiden_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for the Leiden Algorithm — leiden_wrapper","title":"Wrapper for the Leiden Algorithm — leiden_wrapper","text":"Wrapper Leiden Algorithm","code":""},{"path":"https://mjz1.github.io/scatools/reference/leiden_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for the Leiden Algorithm — leiden_wrapper","text":"","code":"leiden_wrapper(adj_mat, group_singletons = TRUE, resolution = 1)"},{"path":"https://mjz1.github.io/scatools/reference/leiden_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for the Leiden Algorithm — leiden_wrapper","text":"adj_mat Adjacency matrix resolution Resolution paramter","code":""},{"path":"https://mjz1.github.io/scatools/reference/leiden_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for the Leiden Algorithm — leiden_wrapper","text":"cluster memberships","code":""},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Length normalize counts — length_normalize","title":"Length normalize counts — length_normalize","text":"default procedure impact counts bins variable length (example tail ends chromosomes).","code":""},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length normalize counts — length_normalize","text":"","code":"length_normalize(   sce,   assay_name = \"counts\",   assay_to = \"counts_lenNorm\",   binwidths = width(rowRanges(sce)),   by_factor = getmode(binwidths),   verbose = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length normalize counts — length_normalize","text":"sce SCE object assay_name Name assay normalize by_factor Multiplication factor counts verbose Print verbose (TRUE/FALSE) binwidth Vector binwidths","code":""},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length normalize counts — length_normalize","text":"sce object counts length normalized assay(sce, 'counts_permb')","code":""},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Load atac binned depth data — load_atac_bins","title":"Load atac binned depth data — load_atac_bins","text":"Loads binned atac reads, merges cell-wise bin-wise metadata, performs QC.","code":""},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load atac binned depth data — load_atac_bins","text":"","code":"load_atac_bins(bin_dir, sample_id, bins = NULL, save_to = NULL, verbose = TRUE)"},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load atac binned depth data — load_atac_bins","text":"bin_dir Directory bin counts sample_id Sample ID bins Optional: GRanges bins object save_to File path save final output. Note: still return sce object downstream analysis. verbose Message verbosity","code":""},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load atac binned depth data — load_atac_bins","text":"SingleCellExperiment object.","code":""},{"path":"https://mjz1.github.io/scatools/reference/logNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"logNorm() — logNorm","title":"logNorm() — logNorm","text":"Computes log transformation selected assay. Function taken copyKit package.","code":""},{"path":"https://mjz1.github.io/scatools/reference/logNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logNorm() — logNorm","text":"","code":"logNorm(   scCNA,   transform = c(\"log\", \"log2\", \"log10\", \"log1p\"),   assay = \"segment_ratios\",   name = \"logr\" )"},{"path":"https://mjz1.github.io/scatools/reference/logNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logNorm() — logNorm","text":"scCNA scCNA object. transform String specifying transformation apply selected assay. assay String name assay pull data run segmentation. name String name target slot resulting transformed counts.","code":""},{"path":"https://mjz1.github.io/scatools/reference/logNorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logNorm() — logNorm","text":"data frame log transformed counts inside assay slot.","code":""},{"path":"https://mjz1.github.io/scatools/reference/merge_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge segment levels — merge_segments","title":"Merge segment levels — merge_segments","text":"Wrapper mergeLevels() merge segments","code":""},{"path":"https://mjz1.github.io/scatools/reference/merge_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge segment levels — merge_segments","text":"","code":"merge_segments(   sce,   smooth_assay,   segment_assay,   new_assay = \"segment_merged\",   ncores = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/merge_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge segment levels — merge_segments","text":"sce SingleCellExperiment object smooth_assay name assay smoothed counts segment_assay name assay segmented counts new_assay Name new assay ncores Number cores use","code":""},{"path":"https://mjz1.github.io/scatools/reference/merge_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge segment levels — merge_segments","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/overlap_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlap genes with bins — overlap_genes","title":"Overlap genes with bins — overlap_genes","text":"Given annotation object, function overlap genes bins place results metadata slot gene_overlaps. function also attempt annotate cancer genes using OncoKB.","code":""},{"path":"https://mjz1.github.io/scatools/reference/overlap_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlap genes with bins — overlap_genes","text":"","code":"overlap_genes(sce, ensDb, gene_biotype = \"all\")"},{"path":"https://mjz1.github.io/scatools/reference/overlap_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlap genes with bins — overlap_genes","text":"sce SingleCellExperiment object ensDb EnsemblDb object EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86 gene_biotype Gene biotypes overlap. Defaults \"\". Use \"protein_coding\" keep protein coding genes","code":""},{"path":"https://mjz1.github.io/scatools/reference/overlap_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlap genes with bins — overlap_genes","text":"SingleCellExperiment object gene overlaps sce@metadata$gene_overlaps","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Cell HMMcopy parameters — params_sc_hmm","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"Function generate parameter matrix HMMcopy::HMMsegment(). Set-default values single-cell analysis.","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"","code":"params_sc_hmm(   e = (1 - 1e-06),   strength = 1000,   mu = 0:11,   lambda = 20,   nu = 2.1,   kappa = c(100, 100, 700, 100, 25, 25, 25, 25, 25, 25, 25, 25),   m = mu,   eta = 50000,   gamma = 3,   S = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"e Probability extending segment, increase lengthen segments, decrase shorten segments. Range: (0, 1) strength Strength initial e suggestion, reducing allows e change, increasing makes e undefinable. Range: [0, Inf) mu Suggested median copy numbers state, change readjust classification states. Range: (-Inf, Inf) lambda Suggested precision (inversed variance) copy numbers state, increase reduce overlap states. Range: [0, Inf) nu Suggested degree freedom states, increase reduce overlap states. Range: [0, Inf) kappa Suggested distribution states. sum 1. Must length mu. m Optimal value mu, difference corresponding mu value determines elasticity mu value. .e. Set identical value mu want mu move much. eta Mobility mu, increase allow movement. Range: [0, Inf) gamma Prior shape lambda, gamma distribution. Effects flexibility lambda. S Prior scale lambda, gamma distribution. Effects flexibility lambda.","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"data frame parameters HMMcopy::HMMsegment()","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"HMMsegment two stage algorithm first runs   Expectation-Maximization algorithm find optimal set parameters   based suggested parameter inputs, allowed flexibilities.    iteratively finding optimal parameters, actual segmentation   data conducted Viterbi algorithm, finally output segmented   states.  extension hidden Markov model described Shah   et al., 2006. Parameters divided two main categories: Initial parameters: e, mu, lambda, nu, kappa Flexibility parameters: strength, m, eta, gamma, S initial parameters treated starting suggestions   parameter optimization algorithm, flexibility parameters (hyperparameters)   define much initial parameters allowed deviate   search optimal parameters. good copy number dataset, theory, given enough flexibility,   algorithm always find similar set optimal parameters regardless   initial parameters (although running times vary). reason wish manually set parameters   final segmentation process, one tune flexibility parameters   minimal values.  example, wish increase length segments,   set: suggests segments long, gives minimal   non-existant flexibility suggestion. See vignette diagrammed example:","code":"param$e <- 0.9999999999999999     param$strength <- 1e30 vignette(\"HMMcopy\")"},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"","code":"param <- params_sc_hmm()"},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GC Correction — perform_gc_cor","title":"Perform GC Correction — perform_gc_cor","text":"Performs GC correction using matrix cell counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GC Correction — perform_gc_cor","text":"","code":"perform_gc_cor(   mat,   gc,   valid_mat = NULL,   method = c(\"modal\", \"copykit\", \"loess\"),   ncores = 1,   verbose = FALSE,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GC Correction — perform_gc_cor","text":"mat Count matrix GC correction gc GC corresponding bins (rows) matrix valid_mat Matrix TRUE/FALSE valid bins. none provided defaults TRUE method Specifies type GC correction perform. One 'modal', 'copykit', 'loess' ncores Number cores use parallel backend available verbose Message verbosity (TRUE/FALSE) ... Additional arguments passed GC correction methods","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform GC Correction — perform_gc_cor","text":"Sparse matrix corrected counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform GC Correction — perform_gc_cor","text":"Note: using modal must pass results=\"counts\" argument. Uses pbmcapply::pbmclapply() parallelization.","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform UMAP and clustering — perform_umap_clustering","title":"Perform UMAP and clustering — perform_umap_clustering","text":"Clusters copy number matrix using hdbscan.","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform UMAP and clustering — perform_umap_clustering","text":"","code":"perform_umap_clustering(   cn_matrix,   n_neighbors = 10,   min_dist = 0.1,   minPts = 30,   scale = c(\"none\", \"cells\", \"bins\", \"both\"),   log2 = FALSE,   seed = 3,   metric = \"correlation\",   verbose = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform UMAP and clustering — perform_umap_clustering","text":"cn_matrix Copy number matrix cells columns bins rows n_neighbors size local neighborhood (terms number neighboring sample points) used manifold approximation. Larger values result global views manifold, smaller values result local data preserved. general values range 2 100. min_dist effective minimum distance embedded points. Smaller values result clustered/clumped embedding nearby points manifold drawn closer together, larger values result even dispersal points. value set relative spread value, determines scale embedded points spread . scale One 'cells', 'bins', '' 'none'. Determines kind scaling done. log2 Logical: Log2 transform matrix prior plotting metric Type distance metric use find nearest neighbors. One   : \"euclidean\" (default) \"cosine\" \"manhattan\" \"hamming\" \"correlation\" (distance based Pearson correlation) \"categorical\" (see ) applies nn_method = \"annoy\" (nn_method = \"fnn\", distance metric always \"euclidean\"). X data frame matrix, multiple metrics can specified, passing list argument, name item list one metric names . value list item vector giving names integer ids columns included calculation, e.g. metric = list(euclidean = 1:4, manhattan = 5:10). metric calculation results separate fuzzy simplicial set, intersected together produce final set. Metric names can repeated. non-numeric columns removed data frame, safer use column names integer ids. Factor columns can also used specifying metric name \"categorical\". Factor columns treated different numeric columns although multiple factor columns can specified vector, factor column specified processed individually. specify non-factor column, coerced factor. given data block, may override pca pca_center arguments block, providing list one unnamed item containing column names ids, pca pca_center overrides named items, e.g. metric = list(euclidean = 1:4, manhattan = list(5:10, pca_center = FALSE)). exists allow mixed binary real-valued data included PCA applied , centering applied real-valued data (typical apply centering binary data PCA applied). verbose Logical: Message verbosity","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform UMAP and clustering — perform_umap_clustering","text":"list clustering results clustering Data frame cell cluster identities hdbscanresults Results dbscan::hdbscan umapresults Results uwot::umap tree Results ape::.phylo hdbscanresults$hc","code":""},{"path":"https://mjz1.github.io/scatools/reference/phase_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"EM phasing of SNPs — phase_snps","title":"EM phasing of SNPs — phase_snps","text":"EM phasing SNPs","code":""},{"path":"https://mjz1.github.io/scatools/reference/phase_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EM phasing of SNPs — phase_snps","text":"","code":"phase_snps(   snp,   bins,   max_iter = 50,   sub_cells = NULL,   phases = NULL,   ncores = 1,   min_snp_cov = 5,   min_bin_snps = 5,   tol = 0.001 )"},{"path":"https://mjz1.github.io/scatools/reference/phase_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EM phasing of SNPs — phase_snps","text":"snp SingleCellExperiment object containing hetSNPs generated read_vartrix bins GenomicRanges object containing bins (segments) perform phasing max_iter Maximum number iterations EM sub_cells Subset cells phasing phases Named vector SNP phases. ncores Number cores parallelize bins min_snp_cov Minimum total coverage per SNP used phasing. min_bin_snps Minimum number covered SNPs within bin used. tol maximum liklihood stopping tolerance","code":""},{"path":"https://mjz1.github.io/scatools/reference/phase_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EM phasing of SNPs — phase_snps","text":"SingleCellExperiment object containing EM phased SNPs. Per bin values stored altExp(snp, 'em'). Per SNP results appended rowRanges(snp)","code":""},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cell Copy Number — plot_cell_cna","title":"Plot Cell Copy Number — plot_cell_cna","text":"Plot Cell Copy Number","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cell Copy Number — plot_cell_cna","text":"","code":"plot_cell_cna(   sce,   cell_id = NULL,   assay_name = \"counts\",   col_fun = NULL,   linewidth = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cell Copy Number — plot_cell_cna","text":"sce sce object cell_id Vector cell ids assay_name Name assay plot col_fun Color mapping function circlize::colorRamp2()","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cell Copy Number — plot_cell_cna","text":"ggplot object","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple cell assays together — plot_cell_multi","title":"Plot multiple cell assays together — plot_cell_multi","text":"Plot multiple cell assays together","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple cell assays together — plot_cell_multi","text":"","code":"plot_cell_multi(sce, cell_id, assays)"},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple cell assays together — plot_cell_multi","text":"sce SCE object cell_id Cell ids assays Assays plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple cell assays together — plot_cell_multi","text":"List ggplot objects","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_psuedobulk_cna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Psuedobulk cell CNA profiles — plot_cell_psuedobulk_cna","title":"Plot Psuedobulk cell CNA profiles — plot_cell_psuedobulk_cna","text":"Plot Psuedobulk cell CNA profiles","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_psuedobulk_cna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Psuedobulk cell CNA profiles — plot_cell_psuedobulk_cna","text":"","code":"plot_cell_psuedobulk_cna(   sce,   assay_name,   group_var = \"all\",   aggr_fun = mean,   col_fun = NULL )"},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_psuedobulk_cna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Psuedobulk cell CNA profiles — plot_cell_psuedobulk_cna","text":"sce sce object assay_name Name assay plot aggr_fun Function use psuedobulk data. col_fun Color mapping function circlize::colorRamp2()","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_psuedobulk_cna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Psuedobulk cell CNA profiles — plot_cell_psuedobulk_cna","text":"ggplot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_clone_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone Copy Number Comparison Plot — plot_clone_comp","title":"Clone Copy Number Comparison Plot — plot_clone_comp","text":"Clone Copy Number Comparison Plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_clone_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone Copy Number Comparison Plot — plot_clone_comp","text":"","code":"plot_clone_comp(   sce,   group_var = \"clusters\",   subset_clones = NULL,   subset_chr = NULL,   assay_name = \"segment_merged_logratios\",   center_point = NULL,   pt_size = 0.75,   xline = NULL,   yline = NULL,   lg_pt_size = 3,   pseudobulk_fun = mean )"},{"path":"https://mjz1.github.io/scatools/reference/plot_clone_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone Copy Number Comparison Plot — plot_clone_comp","text":"sce sce object group_var column name clone information subset_clones optional vector clones subset comparison subset_chr optional vector chromosomes subset comparison assay_name name assay use center_point Center point assay drawing dashed lines pt_size Size points plot xline Numeric X intercept line yline Numeric Y intecept line lg_pt_size Size points legend pseudobulk_fun mean median","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_clone_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone Copy Number Comparison Plot — plot_clone_comp","text":"ggapply plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_gene_cna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Gene CNA — plot_gene_cna","title":"Plot Gene CNA — plot_gene_cna","text":"Plot Gene CNA","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_gene_cna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Gene CNA — plot_gene_cna","text":"","code":"plot_gene_cna(   sce,   gene,   assay_type = \"counts\",   group_by = NULL,   color_by = group_by,   return_data = F )"},{"path":"https://mjz1.github.io/scatools/reference/plot_gene_cna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Gene CNA — plot_gene_cna","text":"sce sce gene gene assay_type assay group_by grouping variable color_by coloring variable","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_gene_cna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Gene CNA — plot_gene_cna","text":"plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot data with segments — plot_segs","title":"Plot data with segments — plot_segs","text":"plot copy number tracks raw input overlaid segmented data","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot data with segments — plot_segs","text":"","code":"plot_segs(sce, seg_assay, input_assay, cell_id)"},{"path":"https://mjz1.github.io/scatools/reference/plot_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot data with segments — plot_segs","text":"sce SingleCellExperiment object data seg_assay segmented assay input_assay input data assay (pre-segmented) cell_id Cell plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot data with segments — plot_segs","text":"ggplot","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudo_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudobulk groups — pseudo_groups","title":"Pseudobulk groups — pseudo_groups","text":"Pseudobulk groups","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudo_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudobulk groups — pseudo_groups","text":"","code":"pseudo_groups(sce, assay_name, group_var = NULL, FUN = mean, na.rm = TRUE, ...)"},{"path":"https://mjz1.github.io/scatools/reference/pseudo_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudobulk groups — pseudo_groups","text":"sce sce obj assay_name One assays pseudobulk group_var grouping variable FUN funtion use pseudobulking na.rm logical -- remove NAs FUN ... additional parameters pass FUN","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudo_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudobulk groups — pseudo_groups","text":"pseudobulked sce obj","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudo_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join SNP and scATAC depth — pseudo_join","title":"Join SNP and scATAC depth — pseudo_join","text":"Join SNP scATAC depth","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudo_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join SNP and scATAC depth — pseudo_join","text":"","code":"pseudo_join(   sce,   snp,   sce_assay = \"counts\",   ncores = 1,   group_var = NULL,   min_cov = 5,   sce_aggr_fun = mean )"},{"path":"https://mjz1.github.io/scatools/reference/pseudo_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join SNP and scATAC depth — pseudo_join","text":"sce sce obj snp snp obj sce_assay sce_assay aggr ncores Number cores speed computation group_var Column containing cell grouping information min_cov Minumum coverage per SNP across pseudobulked cells included calculation sce_aggr_fun fx aggr","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudo_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join SNP and scATAC depth — pseudo_join","text":"joint obj","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudobulk_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudobulk cell CNA profiles — pseudobulk_sce","title":"Pseudobulk cell CNA profiles — pseudobulk_sce","text":"Pseudobulk cell CNA profiles","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudobulk_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudobulk cell CNA profiles — pseudobulk_sce","text":"","code":"pseudobulk_sce(sce, assay_name, group_var = \"all\", statistics = \"mean\")"},{"path":"https://mjz1.github.io/scatools/reference/pseudobulk_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudobulk cell CNA profiles — pseudobulk_sce","text":"sce SingleCellExperiment Object assay_name Name assay group_var Grouping variable pseudobulk across. Default: \"\" statistics Character vector specifying type statistics computed, see scuttle::summarizeAssayByGroup.","code":""},{"path":"https://mjz1.github.io/scatools/reference/pseudobulk_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudobulk cell CNA profiles — pseudobulk_sce","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Vatrix Data — read_vartrix","title":"Read Vatrix Data — read_vartrix","text":"Reads Vartrix scSNP pileups. Assumes Vartrix run -s coverage mode, outputting barcodes variants table. dir_path provided, user must provide individual file paths file. phased VCF input VCF provided function also remove non-heterozygous loci, indels.","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Vatrix Data — read_vartrix","text":"","code":"read_vartrix(   dir_path = NULL,   mtx_ref = NULL,   mtx_alt = NULL,   barcodes = NULL,   variants = NULL,   input_vcf = NULL,   phased_vcf = NULL,   verbose = FALSE,   keep_barcodes = NULL,   blacklist = NULL,   min_counts = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Vatrix Data — read_vartrix","text":"dir_path Path Vartrix outputs directory mtx_ref Path reference allele .mtx file mtx_alt Path alternate allele .mtx file barcodes Path barcodes file variants Path variants file input_vcf Germline VCF phasing phased_vcf Phased VCF verbose Verbosity keep_barcodes Vector cell barcodes keep. perform intersect list. blacklist Optional blacklist remove SNPs min_counts Minimum count number across cells keep SNP","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Vatrix Data — read_vartrix","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/rebin_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Rebin SingleCellExperiment object — rebin_sce","title":"Rebin SingleCellExperiment object — rebin_sce","text":"rebin data larger bins. tested smaller bins.","code":""},{"path":"https://mjz1.github.io/scatools/reference/rebin_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rebin SingleCellExperiment object — rebin_sce","text":"","code":"rebin_sce(sce, assays, new_bins, cell_ids = NULL, ncores = 1)"},{"path":"https://mjz1.github.io/scatools/reference/rebin_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rebin SingleCellExperiment object — rebin_sce","text":"sce SingleCellExperiment object assays Names assays include rebinning process new_bins GenomicRanges new bins cell_ids Cells include rebinning. NULL defaults cells ncores Number cores speed rebinning","code":""},{"path":"https://mjz1.github.io/scatools/reference/rebin_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rebin SingleCellExperiment object — rebin_sce","text":"Rebinned SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Cell HMMcopy — run_sc_hmmcopy","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"conveniece wrapper function hmmcopy_singlecell() test multiple candidate multiplier (aka ploidy) values return either best result, list results downstream analysis.","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"","code":"run_sc_hmmcopy(   chr,   start,   end,   counts,   reads,   ideal = rep(TRUE, length(counts)),   param = params_sc_hmm(),   cell_id,   multipliers = 1:6,   verbose = FALSE,   maxiter = 200,   n_cutoff = NULL,   return = c(\"best\", \"all\") )"},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"chr Vector chromosomes start Vector bin start positions end Vector bin end positions counts Vector bin corrected counts. ideally GC corrected counts gc_cor_modal() reads vector raw read counts per bin ideal logical vector indicating bins ideal analysis. See is_ideal_bin() param matrix parameter values columns state rows. See HMMcopy::HMMsegment() information. cell_id Cell id multipliers Positive integer list ploidy multipliers test verbose Print verbose maxiter maximum number iterations allows Maximum-Expectation algorithm, reduce decrease running time expense robustness. n_cutoff Cutoff number bins given state calculating true_multiplier value. Defaults 5% bins. return character. One best either return result best ploidy , list results ploidies","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"list following objects: bincounts Data frame bin counts copy state modal_seg Data frame genome segments mstats single row cell summary statistics df_params Data frame parameters used iteration state","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_scatools.html","id":null,"dir":"Reference","previous_headings":"","what":"Run scATAC Copy Number Analysis — run_scatools","title":"Run scATAC Copy Number Analysis — run_scatools","text":"Convenience wrapper run sample","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_scatools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run scATAC Copy Number Analysis — run_scatools","text":"","code":"run_scatools(   sample_id,   fragment_file,   bins = bins_10mb,   bin_name = prettyMb(getmode(width(bins))),   blacklist = NULL,   outdir = sample_id,   rmsb_size = 0.1 * getmode(width(bins)),   gc_range = c(0.3, 0.8),   overwrite = FALSE,   verbose = TRUE,   save_h5ad = TRUE,   ncores = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/run_scatools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run scATAC Copy Number Analysis — run_scatools","text":"sample_id Sample id bins Genomic ranges object bins use bin_name Name bins (e.g. 10Mb, 500Kb) blacklist Genome blacklist regions filter outdir Output directory rmsb_size Remove small bins given size. Useful cases small bins leftover ends chromosomes. Defaults 10% binwidth. gc_range GC range bins keep. Removes large GC outliers overwrite Whether overwrite previous results verbose Verbosity save_h5ad Logical. Whether save raw processed h5ad files. Requires packages zellkonverter anndata ncores Number cores fragments Fragments file","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_scatools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run scATAC Copy Number Analysis — run_scatools","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/scale_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale and subset SCE assays — scale_sub","title":"Scale and subset SCE assays — scale_sub","text":"Scale subset SCE assays","code":""},{"path":"https://mjz1.github.io/scatools/reference/scale_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale and subset SCE assays — scale_sub","text":"","code":"scale_sub(   sce,   assay_name = \"counts\",   log2 = FALSE,   scale = \"none\",   verbose = FALSE,   new_assay = NULL,   center = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/scale_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale and subset SCE assays — scale_sub","text":"sce SingleCellExperiment assay_name Assay transform log2 Logical: log transform scale One :c(\"none\", \"cells\", \"bins\", \"\"). Specifies scaling dome verbose Message verbosity new_assay New assay name center Center matrix","code":""},{"path":"https://mjz1.github.io/scatools/reference/scale_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale and subset SCE assays — scale_sub","text":"single cell experiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/scatools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scatools: scATAC Tools and Utilities For Copy Number Analysis — scatools-package","title":"scatools: scATAC Tools and Utilities For Copy Number Analysis — scatools-package","text":"collection useful code handling scATAC data.","code":""},{"path":[]},{"path":"https://mjz1.github.io/scatools/reference/scatools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scatools: scATAC Tools and Utilities For Copy Number Analysis — scatools-package","text":"Maintainer: Matthew Zatzman matthew.zatzman@gmail.com","code":""},{"path":"https://mjz1.github.io/scatools/reference/segment_cnv.html","id":null,"dir":"Reference","previous_headings":"","what":"scATAC CBS CNV segmentation — segment_cnv","title":"scATAC CBS CNV segmentation — segment_cnv","text":"scATAC CBS CNV segmentation","code":""},{"path":"https://mjz1.github.io/scatools/reference/segment_cnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scATAC CBS CNV segmentation — segment_cnv","text":"","code":"segment_cnv(   sce,   assay_name,   new_assay = paste(assay_name, \"segment\", sep = \"_\"),   alpha = 0.2,   nperm = 10,   min.width = 2,   undo.splits = \"none\",   verbose = 0,   ncores = 1,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/segment_cnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scATAC CBS CNV segmentation — segment_cnv","text":"sce SingleCellExperiment object assay_name Name assay segment new_assay Name new assay alpha significance levels test accept change-points. nperm number permutations used p-value computation. min.width minimum number markers changed segment.     default 2 can made larger.  Maximum possible value     set 5 since arbitrary widths can undesirable effect     incorrect change-points true signal narrow widths exists. undo.splits character string specifying change-points     undone, .  Default \"none\".  choices     \"prune\", uses sum squares criterion, \"sdundo\",      undoes splits least many SDs apart. verbose Verbosity ncores Number cores use ... Additional parameters pass DNAcopy::segment","code":""},{"path":"https://mjz1.github.io/scatools/reference/segment_cnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scATAC CBS CNV segmentation — segment_cnv","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/smooth_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth outlier copy number counts — smooth_counts","title":"Smooth outlier copy number counts — smooth_counts","text":"Smooth outlier copy number counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/smooth_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth outlier copy number counts — smooth_counts","text":"","code":"smooth_counts(   sce,   assay_name,   ncores = 1,   smooth_name = paste(assay_name, \"smoothed\", sep = \"_\") )"},{"path":"https://mjz1.github.io/scatools/reference/smooth_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth outlier copy number counts — smooth_counts","text":"sce SingleCellExperiment object assay_name Name assay smooth ncores Number cores use smooth_name Name returned assay smoothed counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/smooth_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth outlier copy number counts — smooth_counts","text":"SingleCellExperiument Object","code":""},{"path":"https://mjz1.github.io/scatools/reference/summarise_chr_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise copy number signal over chromosome arms — summarise_chr_arm","title":"Summarise copy number signal over chromosome arms — summarise_chr_arm","text":"Summarise copy number signal chromosome arms","code":""},{"path":"https://mjz1.github.io/scatools/reference/summarise_chr_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise copy number signal over chromosome arms — summarise_chr_arm","text":"","code":"summarise_chr_arm(   sce,   assay_name,   cn_granges = NULL,   granges_signal_colname = NULL,   genome_ver = \"hg38\" )"},{"path":"https://mjz1.github.io/scatools/reference/summarise_chr_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise copy number signal over chromosome arms — summarise_chr_arm","text":"sce SingleCellExperiment objet assay_name Name assay cn_granges Optional: Copy number granges integrate arm level bins granges_signal_colname Optional: Name column containing CNA information cn_granges genome_ver Genome version (\"hg38\" \"hg19\")","code":""},{"path":"https://mjz1.github.io/scatools/reference/summarise_chr_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise copy number signal over chromosome arms — summarise_chr_arm","text":"chromosome arm level binned SingleCellExperiment","code":""},{"path":"https://mjz1.github.io/scatools/reference/test_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Processed scATAC dataset — test_sce","title":"Processed scATAC dataset — test_sce","text":"subset cells normal mammary","code":""},{"path":"https://mjz1.github.io/scatools/reference/test_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processed scATAC dataset — test_sce","text":"","code":"test_sce"},{"path":[]},{"path":"https://mjz1.github.io/scatools/reference/test_sce.html","id":"test-sce","dir":"Reference","previous_headings":"","what":"test_sce","title":"Processed scATAC dataset — test_sce","text":"SingleCellExperiment object 255 bins 67 cells.","code":""},{"path":"https://mjz1.github.io/scatools/news/index.html","id":"scatools-01","dir":"Changelog","previous_headings":"","what":"SCAtools 0.1","title":"SCAtools 0.1","text":"Initial release","code":""}]
