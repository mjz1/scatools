[{"path":"https://mjz1.github.io/scatools/articles/scatools.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"scatools","text":"can install development version scatools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mjz1/scatools\")"},{"path":"https://mjz1.github.io/scatools/articles/scatools.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"scatools","text":"start loading scatools ArchR, well filepath example fragments.bed.gz file containing fragments 100 normal mammary cells. bed file generated using reformatFragmentFiles() function ArchR package. Note steps vignette work list fragment files multiple samples well. first create ArrowFile fragments file using ArchR package. already processed ArrowFiles can skip scatools processing steps. Now process data using scatools. Helper functions help us create GenomicRanges bins, compute GC content downstream usage. demonstrate using 10Mb bins. Next bin atac fragments input ArrowFiles. set perform analysis samples can visualize results heatmap.  plot individual cells","code":"library(scatools) library(ArchR, quietly = TRUE) library(BSgenome.Hsapiens.UCSC.hg38, quietly = TRUE) ncores <- 8 # Adjust accordingly addArchRThreads(ncores) addArchRGenome(\"hg38\")  fragment_file <- system.file(\"extdata\", \"fragments.bed.gz\", package = \"scatools\") names(fragment_file) <- \"test_sample\"  # Set up example output directories arrow_dir = \"./example/ArrowFiles\" bindepth_dir = \"./example/binned_depth\" scatools_dir = \"./example/scatools_analysis\"  invisible(lapply(list(arrow_dir, bindepth_dir, scatools_dir), dir.create, showWarnings = FALSE, recursive = TRUE)) knitr::opts_chunk$set(root.dir = arrow_dir)  setwd(arrow_dir)  ArrowFiles <- createArrowFiles(   inputFiles = fragment_file,   sampleNames = names(fragment_file),   minTSS = 4, #Dont set this too high because you can always increase later   minFrags = 1000,   addTileMat = TRUE,   addGeneScoreMat = TRUE,   force = FALSE )  # Calculate doublet scores doubScores <- addDoubletScores(   input = ArrowFiles,   k = 10, #Refers to how many cells near a \"pseudo-doublet\" to count.   knnMethod = \"LSI\", #Refers to the embedding to use for nearest neighbor search.   LSIMethod = 1,   force = FALSE )  # Create an ArchR project file proj <- ArchRProject(   ArrowFiles = ArrowFiles,   outputDirectory = \"./\",   copyArrows = FALSE #This is recommended so that you maintain an unaltered copy for later usage. )  proj <- filterDoublets(proj) # Generate bins bins <- get_tiled_bins(bs_genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38, tilewidth = 1e7)  bin_name <- prettyMb(getmode(width(bins))) message(bin_name) #> 10Mb  head(bins) #> GRanges object with 6 ranges and 4 metadata columns: #>       seqnames            ranges strand |  binwidth                 bin_id #>          <Rle>         <IRanges>  <Rle> | <integer>            <character> #>   [1]     chr1        1-10000000      * |  10000000        chr1_1_10000000 #>   [2]     chr1 10000001-20000000      * |  10000000 chr1_10000001_20000000 #>   [3]     chr1 20000001-30000000      * |  10000000 chr1_20000001_30000000 #>   [4]     chr1 30000001-40000000      * |  10000000 chr1_30000001_40000000 #>   [5]     chr1 40000001-50000000      * |  10000000 chr1_40000001_50000000 #>   [6]     chr1 50000001-60000000      * |  10000000 chr1_50000001_60000000 #>              gc    n_freq #>       <numeric> <numeric> #>   [1]  0.497180 0.0203509 #>   [2]  0.475757 0.0100000 #>   [3]  0.474349 0.0001602 #>   [4]  0.462978 0.0000000 #>   [5]  0.440598 0.0000000 #>   [6]  0.423609 0.0000000 #>   ------- #>   seqinfo: 23 sequences from hg38 genome # Bin the fragments bin_atac_frags(ArrowFiles = getArrowFiles(proj), bins = bins, outdir = bindepth_dir, ncores = ncores, overwrite = FALSE, return_mat = FALSE) samples <- file.path(bins_out, bin_name, sample_name)  for (i in seq_along(samples)) {   samp_dir <- samples[i]   samp_name <- sample_name[i]    samp_outdir <- file.path(scatoolsdir, bin_name, samp_name)    raw_out <- file.path(samp_outdir, \"sce\", \"01_raw.sce\")   final_out <- file.path(samp_outdir, \"sce\", \"02_hmm.sce\")   hmm_out <- file.path(samp_outdir, \"hmm\", \"hmm_results.rda\")    logger::log_info(\"Processing sample {i} of {length(samples)}: {samp_name}\")      if (file.exists(final_out) & !overwrite) {     logger::log_info(\"Final output exists! Skipping to next sample...\")     next   }    if (file.exists(raw_out) & !overwrite) {     logger::log_info(\"Raw sce object found -- Loading...\")     sce <- get(load(raw_out))   } else {     sce <- load_atac_bins(       samples = samp_dir,       sample.names = samp_name,       ArchR_Proj = proj,       bins = bins,       BPPARAM = BiocParallel::bpparam(),       save_to = raw_out,       verbose = verbose     )   }      sce <- sce %>%     add_ideal_mat(ncores = ncores, verbose = verbose) %>%     add_gc_cor(method = \"modal\", verbose = verbose, ncores = ncores) %>%     add_hmmcopy(verbose = verbose, ncores = ncores, save_raw_hmm = hmm_out)      save_to(object = sce, save_to = final_out) } cnaPlot <- cnaHeatmap(sce = sce, assay_name = \"counts\", log2 = TRUE, scale = \"both\", legend_name = \"Log Normalized Counts\", verbose = FALSE) cnaPlot plot_cell_cna(sce = sce, cell_id = colnames(sce)[1:5], assay_name = \"counts_gc_modal\") +   coord_cartesian(ylim = c(0, 10))"},{"path":"https://mjz1.github.io/scatools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Zatzman. Author, maintainer.","code":""},{"path":"https://mjz1.github.io/scatools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zatzman M (2022). scatools: scATAC tools utilities. https://github.com/mjz1/scatools, https://mjz1.github.io/scatools/.","code":"@Manual{,   title = {scatools: scATAC tools and utilities},   author = {Matthew Zatzman},   year = {2022},   note = {https://github.com/mjz1/scatools, https://mjz1.github.io/scatools/}, }"},{"path":"https://mjz1.github.io/scatools/index.html","id":"scatools","dir":"","previous_headings":"","what":"scATAC tools and utilities","title":"scATAC tools and utilities","text":"scatools package meant performing copy number analysis scATAC data.","code":""},{"path":"https://mjz1.github.io/scatools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"scATAC tools and utilities","text":"can install development version scatools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mjz1/scatools\")"},{"path":"https://mjz1.github.io/scatools/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"scATAC tools and utilities","text":"start loading scatools ArchR, well filepath example fragments.bed.gz file containing fragments 100 normal mammary cells. bed file generated using reformatFragmentFiles() function ArchR package. Note steps vignette work list fragment files multiple samples well. first create ArrowFile fragments file using ArchR package. already processed ArrowFiles can skip scatools processing steps. Now process data using scatools. Helper functions help us create GenomicRanges bins, compute GC content downstream usage. demonstrate using 10Mb bins. Next bin atac fragments input ArrowFiles. set perform analysis samples can visualize results heatmap.  plot individual cells","code":"library(scatools) library(ArchR, quietly = TRUE) library(BSgenome.Hsapiens.UCSC.hg38, quietly = TRUE) ncores <- 8 # Adjust accordingly addArchRThreads(ncores) addArchRGenome(\"hg38\")  fragment_file <- system.file(\"extdata\", \"fragments.bed.gz\", package = \"scatools\") names(fragment_file) <- \"test_sample\"  # Set up example output directories arrow_dir = \"./example/ArrowFiles\" bindepth_dir = \"./example/binned_depth\" scatools_dir = \"./example/scatools_analysis\"  invisible(lapply(list(arrow_dir, bindepth_dir, scatools_dir), dir.create, showWarnings = FALSE, recursive = TRUE)) knitr::opts_chunk$set(root.dir = arrow_dir)  setwd(arrow_dir)  ArrowFiles <- createArrowFiles(   inputFiles = fragment_file,   sampleNames = names(fragment_file),   minTSS = 4, #Dont set this too high because you can always increase later   minFrags = 1000,   addTileMat = TRUE,   addGeneScoreMat = TRUE,   force = FALSE )  # Calculate doublet scores doubScores <- addDoubletScores(   input = ArrowFiles,   k = 10, #Refers to how many cells near a \"pseudo-doublet\" to count.   knnMethod = \"LSI\", #Refers to the embedding to use for nearest neighbor search.   LSIMethod = 1,   force = FALSE )  # Create an ArchR project file proj <- ArchRProject(   ArrowFiles = ArrowFiles,   outputDirectory = \"./\",   copyArrows = FALSE #This is recommended so that you maintain an unaltered copy for later usage. )  proj <- filterDoublets(proj) # Generate bins bins <- get_tiled_bins(bs_genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38, tilewidth = 1e7)  bin_name <- prettyMb(getmode(width(bins))) message(bin_name) #> 10Mb  head(bins) #> GRanges object with 6 ranges and 4 metadata columns: #>       seqnames            ranges strand |  binwidth                 bin_id #>          <Rle>         <IRanges>  <Rle> | <integer>            <character> #>   [1]     chr1        1-10000000      * |  10000000        chr1_1_10000000 #>   [2]     chr1 10000001-20000000      * |  10000000 chr1_10000001_20000000 #>   [3]     chr1 20000001-30000000      * |  10000000 chr1_20000001_30000000 #>   [4]     chr1 30000001-40000000      * |  10000000 chr1_30000001_40000000 #>   [5]     chr1 40000001-50000000      * |  10000000 chr1_40000001_50000000 #>   [6]     chr1 50000001-60000000      * |  10000000 chr1_50000001_60000000 #>              gc    n_freq #>       <numeric> <numeric> #>   [1]  0.497180 0.0203509 #>   [2]  0.475757 0.0100000 #>   [3]  0.474349 0.0001602 #>   [4]  0.462978 0.0000000 #>   [5]  0.440598 0.0000000 #>   [6]  0.423609 0.0000000 #>   ------- #>   seqinfo: 23 sequences from hg38 genome # Bin the fragments bin_atac_frags(ArrowFiles = getArrowFiles(proj), bins = bins, outdir = bindepth_dir, ncores = ncores, overwrite = FALSE, return_mat = FALSE) samples <- file.path(bins_out, bin_name, sample_name)  for (i in seq_along(samples)) {   samp_dir <- samples[i]   samp_name <- sample_name[i]    samp_outdir <- file.path(scatoolsdir, bin_name, samp_name)    raw_out <- file.path(samp_outdir, \"sce\", \"01_raw.sce\")   final_out <- file.path(samp_outdir, \"sce\", \"02_hmm.sce\")   hmm_out <- file.path(samp_outdir, \"hmm\", \"hmm_results.rda\")    logger::log_info(\"Processing sample {i} of {length(samples)}: {samp_name}\")      if (file.exists(final_out) & !overwrite) {     logger::log_info(\"Final output exists! Skipping to next sample...\")     next   }    if (file.exists(raw_out) & !overwrite) {     logger::log_info(\"Raw sce object found -- Loading...\")     sce <- get(load(raw_out))   } else {     sce <- load_atac_bins(       samples = samp_dir,       sample.names = samp_name,       ArchR_Proj = proj,       bins = bins,       BPPARAM = BiocParallel::bpparam(),       save_to = raw_out,       verbose = verbose     )   }      sce <- sce %>%     add_ideal_mat(ncores = ncores, verbose = verbose) %>%     add_gc_cor(method = \"modal\", verbose = verbose, ncores = ncores) %>%     add_hmmcopy(verbose = verbose, ncores = ncores, save_raw_hmm = hmm_out)      save_to(object = sce, save_to = final_out) } cnaPlot <- cnaHeatmap(sce = sce, assay_name = \"counts\", log2 = TRUE, scale = \"both\", legend_name = \"Log Normalized Counts\", verbose = FALSE) cnaPlot plot_cell_cna(sce = sce, cell_id = colnames(sce)[1:5], assay_name = \"counts_gc_modal\") +   coord_cartesian(ylim = c(0, 10))"},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Add GC correction to SCE Object — add_gc_cor","title":"Add GC correction to SCE Object — add_gc_cor","text":"Add GC correction SCE Object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add GC correction to SCE Object — add_gc_cor","text":"","code":"add_gc_cor(   sce,   gc = rowData(sce)$gc,   assay_name = \"counts\",   method = c(\"modal\", \"copykit\", \"loess\"),   verbose = FALSE,   ncores = 1,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add GC correction to SCE Object — add_gc_cor","text":"sce SCE object gc GC corresponding bins (rows) matrix assay_name Name assay perform GC correction method Specifies type GC correction perform. One 'modal', 'copykit', 'loess' verbose Message verbosity (TRUE/FALSE) ncores Number cores use parallel backend available ... Additional arguments passed GC correction methods","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add GC correction to SCE Object — add_gc_cor","text":"sce object corrected GC count matrix assay(sce, 'counts_gc_[method]'). See perform_gc_cor information.","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Add GC frequency — add_gc_freq","title":"Add GC frequency — add_gc_freq","text":"Add GC frequency","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add GC frequency — add_gc_freq","text":"","code":"add_gc_freq(bs_genome, bins)"},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add GC frequency — add_gc_freq","text":"bs_genome BSGenome object bins GRanges bins object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_gc_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add GC frequency — add_gc_freq","text":"GRanges bin object GC N frequency per bin","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add HMMCopy results to sce object — add_hmmcopy","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"Add HMMCopy results sce object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"","code":"add_hmmcopy(   sce,   verbose = FALSE,   ncores = 1,   assay_name = paste0(\"counts_gc_\", sce@metadata$gc_cor_method),   save_raw_hmm = NULL,   slot_suffix = NULL )"},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"sce SCE object verbose Message verbosity ncores Number cores assay_name Name assay counts input HMMcopy. Ideally GC corrected. save_raw_hmm Path save raw hmm data rda file slot_suffix Suffix add newly created copy state assay slots.","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"sce object hmm copy metadata added coldata, new slots copy state","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_hmmcopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add HMMCopy results to sce object — add_hmmcopy","text":"","code":"data(test_sce) test_sce <- add_hmmcopy(test_sce)"},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Add UMAP clusters to SCE — add_umap_clusters","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"Add UMAP clusters SCE","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"","code":"add_umap_clusters(   sce,   assay_name,   n_neighbors = 10,   min_dist = 0.1,   minPts = 30,   scale = c(\"none\", \"cells\", \"bins\", \"both\"),   name = \"UMAP\",   clone_colname = \"clone_id\",   log2 = FALSE,   seed = 3,   metric = \"correlation\",   verbose = TRUE,   force = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"sce SCE object assay_name Name assay use clustering n_neighbors size local neighborhood (terms number neighboring sample points) used manifold approximation. Larger values result global views manifold, smaller values result local data preserved. general values range 2 100. min_dist effective minimum distance embedded points. Smaller values result clustered/clumped embedding nearby points manifold drawn closer together, larger values result even dispersal points. value set relative spread value, determines scale embedded points spread . scale One 'cells', 'bins', '' 'none'. Determines kind scaling done. name String specifying name used store result reducedDims output. clone_colname Name clone column resulting sce object. log2 Logical: Log2 transform matrix prior plotting metric Type distance metric use find nearest neighbors. One   : \"euclidean\" (default) \"cosine\" \"manhattan\" \"hamming\" \"correlation\" (distance based Pearson correlation) \"categorical\" (see ) applies nn_method = \"annoy\" (nn_method = \"fnn\", distance metric always \"euclidean\"). X data frame matrix, multiple metrics can specified, passing list argument, name item list one metric names . value list item vector giving names integer ids columns included calculation, e.g. metric = list(euclidean = 1:4, manhattan = 5:10). metric calculation results separate fuzzy simplicial set, intersected together produce final set. Metric names can repeated. non-numeric columns removed data frame, safer use column names integer ids. Factor columns can also used specifying metric name \"categorical\". Factor columns treated different numeric columns although multiple factor columns can specified vector, factor column specified processed individually. specify non-factor column, coerced factor. given data block, may override pca pca_center arguments block, providing list one unnamed item containing column names ids, pca pca_center overrides named items, e.g. metric = list(euclidean = 1:4, manhattan = list(5:10, pca_center = FALSE)). exists allow mixed binary real-valued data included PCA applied , centering applied real-valued data (typical apply centering binary data PCA applied). verbose Logical: Message verbosity force Logical. Overwrite identical column names sce object","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"SCE object umap results clones","code":""},{"path":"https://mjz1.github.io/scatools/reference/add_umap_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add UMAP clusters to SCE — add_umap_clusters","text":"","code":"sce <- add_umap_clusters(sce = test_sce, assay_name = \"counts\") #> 13:40:31 UMAP embedding parameters a = 1.577 b = 0.8951 #> 13:40:31 Read 75 rows and found 310 numeric columns #> 13:40:31 Using Annoy for neighbor search, n_neighbors = 10 #> 13:40:32 Annoy build: subtracting row means for correlation #> 13:40:32 Building Annoy index with metric = correlation, n_trees = 50 #> 0%   10   20   30   40   50   60   70   80   90   100% #> [----|----|----|----|----|----|----|----|----|----| #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> | #> 13:40:32 Annoy search: subtracting row means for correlation #> 13:40:32 Writing NN index file to temp file /tmp/RtmpePnXJq/file63f42911a818 #> 13:40:32 Searching Annoy index using 36 threads, search_k = 1000 #> 13:40:32 Annoy recall = 100% #> 13:40:33 Commencing smooth kNN distance calibration using 36 threads #> 13:40:34 Initializing from normalized Laplacian + noise #> 13:40:34 Commencing optimization for 500 epochs, with 1198 positive edges #> 13:40:36 Optimization finished #>   Cluster 0: 75"},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin atac fragments — bin_atac_frags","title":"Bin atac fragments — bin_atac_frags","text":"Convenience wrapper bin fragments given size save .mtx files","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin atac fragments — bin_atac_frags","text":"","code":"bin_atac_frags(   ArrowFiles,   bins,   outdir,   bin_name = prettyMb(getmode(width(bins))),   ncores = 1,   bpparams = BiocParallel::MulticoreParam(workers = ncores, progressbar = TRUE),   overwrite = FALSE,   return_mat = FALSE,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin atac fragments — bin_atac_frags","text":"ArrowFiles List vector ArrowFile paths bins Bins GRanges object outdir Optional: Directory write .mtx, barcodes, bins files bin_name Name bins (e.g. '10Mb', '500Kb', 'chr_arm'). provided automatically detected based binwidth. ncores Number cores use bpparams Options BPPARAM enable multithreading overwrite Logical. Overwrite previously existing results (default = FALSE) return_mat Logical. Return binned depth matrix (default = FALSE) ... Additional parameters passed bplapply","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_atac_frags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin atac fragments — bin_atac_frags","text":"return_mat=TRUE, returns sparse binned depth matrix. Otherwise returns NULL","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin fragments from ArrowFile — bin_frags","title":"Bin fragments from ArrowFile — bin_frags","text":"Parallel enabled depth counting read fragments given genomic bins ArchR processed ArrowFiles","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin fragments from ArrowFile — bin_frags","text":"","code":"bin_frags(   ArrowFile,   bins,   outdir = NULL,   ncores = 1,   bpparams = BiocParallel::MulticoreParam(workers = ncores, progressbar = TRUE),   verbose = FALSE,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin fragments from ArrowFile — bin_frags","text":"ArrowFile ArrowFile bins Bins GRanges object outdir Optional: Directory write .mtx, barcodes, bins files ncores Number cores use bpparams Options BPPARAM enable multithreading verbose Logical. Message verbosity ... Additional arguments passed bplapply","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin fragments from ArrowFile — bin_frags","text":"Binned depth sparse matrix","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin scATAC fragments — bin_frags_chr","title":"Bin scATAC fragments — bin_frags_chr","text":"bin_frags_chr computes fragments across bins single chromosome ArchR ArrowFile","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin scATAC fragments — bin_frags_chr","text":"","code":"bin_frags_chr(chr, bins, ArrowFile)"},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin scATAC fragments — bin_frags_chr","text":"chr single chromsome compute depth information bins list bins (can include chromosomes) ArrowFile Path ArrowFile generated ArchR","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin scATAC fragments — bin_frags_chr","text":"Sparse matrix binned fragment counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_frags_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin scATAC fragments — bin_frags_chr","text":"","code":"if (FALSE) { dp_mat <- bin_frags_chr(\"chr1\", get_chr_arm_bins(\"hg38\"), ArrowFile) }"},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — bin_snp_data","title":"Title — bin_snp_data","text":"Title","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bin_snp_data","text":"","code":"bin_snp_data(snp_sce, binsize = 500000, select_chrs = NULL, bins = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bin_snp_data","text":"binsize Size bins select_chrs Chromosomes include bins Optional override bins snp_granges SNP granges object GT column","code":""},{"path":"https://mjz1.github.io/scatools/reference/bin_snp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — bin_snp_data","text":"SCE object phased binned snps","code":""},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind sublists within lists — bind_sublist","title":"Bind sublists within lists — bind_sublist","text":"Helper function lists lists, top level list multiple samples, sublists results identical across samples one wishes bind","code":""},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind sublists within lists — bind_sublist","text":"","code":"bind_sublist(   toplist,   sublist,   what = c(\"rbind\"),   .add_id = FALSE,   .id_name = \"id\" )"},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind sublists within lists — bind_sublist","text":"toplist List lists rbindable data sublist Name index sublist Specify either cbind rbind (Currently rbind implemented) .add_id Add identifiers data entry prior merging. Based list names available. (default=FALSE) .id_name Name id column added","code":""},{"path":"https://mjz1.github.io/scatools/reference/bind_sublist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind sublists within lists — bind_sublist","text":"","code":"toplist <- list(   sample_1 = list(     result1 = data.frame(       a = c(1, 2, 3),       b = c(\"X\", \"Y\", \"Z\")     ),     result2 = data.frame(       height = 180,       weight = 75     )   ),   sample_2 = list(     result1 = data.frame(       a = c(6, 5, 4),       b = c(\"A\", \"B\", \"C\")     ),     result2 = data.frame(       height = 155,       weight = 60     )   ) )  bind_sublist(toplist, sublist = 1, what = \"rbind\", .add_id = TRUE) #>         id a b #> 1 sample_1 1 X #> 2 sample_1 2 Y #> 3 sample_1 3 Z #> 4 sample_2 6 A #> 5 sample_2 5 B #> 6 sample_2 4 C  bind_sublist(toplist, sublist = \"result2\", what = \"rbind\", .add_id = TRUE) #>         id height weight #> 1 sample_1    180     75 #> 2 sample_2    155     60  bind_sublist(toplist, sublist = 2, what = \"rbind\", .add_id = FALSE) #>   height weight #> 1    180     75 #> 2    155     60"},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot copy number heatmap — cnaHeatmap","title":"Plot copy number heatmap — cnaHeatmap","text":"Plot copy number heatmap","code":""},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot copy number heatmap — cnaHeatmap","text":"","code":"cnaHeatmap(   sce,   assay_name = \"state\",   clone_name = NULL,   cell_order = NULL,   log2 = FALSE,   scale = c(\"none\", \"cells\", \"bins\", \"both\"),   clustering_results = NULL,   col_fun = NULL,   legend_name = assay_name,   clust_annot = TRUE,   verbose = TRUE,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot copy number heatmap — cnaHeatmap","text":"sce SingleCellExperiment object assay_name Name assay plot clone_name Name clone_id column sce object cell_order Optional: Order cells log2 Logical: Log2 transform matrix prior plotting scale One 'cells', 'bins', '' 'none'. Determines kind scaling done. clustering_results Clustering results provide inform cell ordering cluster labelling. perform_umap_clustering col_fun Color mapping function circlize::colorRamp2() legend_name Name legend clust_annot Annotate cluster sample labels verbose Logical: Message verbosity ... Additional parameters can passed ComplexHeatmap::Heatmap()","code":""},{"path":"https://mjz1.github.io/scatools/reference/cnaHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot copy number heatmap — cnaHeatmap","text":"heatmap","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal regression GC Correction for single cell data — gc_cor_modal","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"Modal regression GC Correction single cell data","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"","code":"gc_cor_modal(   counts,   gc,   valid = rep(TRUE, length(counts)),   bin_ids = names(counts),   lowess_frac = 0.2,   q = c(0.1, 0.9),   g = c(0.1, 0.9),   results = c(\"counts\", \"default\", \"full\") )"},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"counts Vector counts bins gc Vector GC content bins valid Vector values corresponding valid bins. none provided defaults TRUE bin_ids Bin ids lowess_frac smoother span. See stats::lowess() details q tuple quantile bounds compute quantile regressions read counts g GC quantiles integrate regression curves results Format results return. One full, default, counts.","code":""},{"path":"https://mjz1.github.io/scatools/reference/gc_cor_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal regression GC Correction for single cell data — gc_cor_modal","text":"dataframe modal quantile GC corrected counts. Results returned based results parameter follows: full Full dataframe containing results quantile curve default Condensed dataframe selected modal quantile curve counts Return vector corrected counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chromosome arm bins — get_chr_arm_bins","title":"Get chromosome arm bins — get_chr_arm_bins","text":"Get chromosome arm bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chromosome arm bins — get_chr_arm_bins","text":"","code":"get_chr_arm_bins(genome = \"hg38\", calc_gc = FALSE, bs_genome = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chromosome arm bins — get_chr_arm_bins","text":"genome Genome version ('hg38', 'hg19') calc_gc Logical: Whether calculate GC content per bin bs_genome BSgenome object. Must passed calc_gc set TRUE","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chromosome arm bins — get_chr_arm_bins","text":"GRanges object chromosome arm bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_chr_arm_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chromosome arm bins — get_chr_arm_bins","text":"","code":"bins <- get_chr_arm_bins(\"hg38\")"},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genome cytobands — get_cytobands","title":"Get genome cytobands — get_cytobands","text":"Get genome cytobands","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genome cytobands — get_cytobands","text":"","code":"get_cytobands(genome = \"hg38\")"},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genome cytobands — get_cytobands","text":"genome Genome version (hg38 hg19)","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genome cytobands — get_cytobands","text":"Dataframe genome cytobands","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_cytobands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genome cytobands — get_cytobands","text":"","code":"hg38_cyto <- get_cytobands(\"hg38\")"},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get factor indices — get_f_idx","title":"Get factor indices — get_f_idx","text":"Get factor indices","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get factor indices — get_f_idx","text":"","code":"get_f_idx(f)"},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get factor indices — get_f_idx","text":"f factor","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_f_idx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get factor indices — get_f_idx","text":"named list indices factor level","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ideal bin matrix — get_ideal_mat","title":"Get ideal bin matrix — get_ideal_mat","text":"Given matrix bin counts, bin gc N frequency, filtering parameters, return boolean matrix flagging ideal bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ideal bin matrix — get_ideal_mat","text":"","code":"get_ideal_mat(   mat,   gc,   n_freq,   map,   min_reads = 1,   max_N_freq = 0.05,   reads_outlier = 0.01,   gc_outlier = 0.001,   min_map = 0.9,   ncores = 1,   verbose = FALSE )  add_ideal_mat(   sce,   assay_name = \"counts\",   gc = rowData(sce)$gc,   n_freq = rowData(sce)$n_freq,   map = rowData(sce)$map,   min_reads = 1,   max_N_freq = 0.05,   reads_outlier = 0.01,   gc_outlier = 0.001,   min_map = 0.9,   ncores = 1,   verbose = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ideal bin matrix — get_ideal_mat","text":"mat, sce count matrix SCE object depending function gc Vector gc content n_freq Vector bin N frequency (proportion N bases bin) map Vector bin mappability min_reads Minimum number reads consider bin max_N_freq Maximum allowable frequency N bases consider bin. Range (0, 1) reads_outlier Flag bins reads top quantile given value. Range (0, 1) gc_outlier Flag bins GC content top bottom quantule given value. Range (0, 1) min_map Minimum allowable mappability score bin. Range (0, 1) ncores number cores parallel evaluation (requires pbmcapply package)","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_ideal_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ideal bin matrix — get_ideal_mat","text":"dataframe two columns meet valid ideal criteria","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"get_snp_counts — get_snp_counts","title":"get_snp_counts — get_snp_counts","text":"Computes per feature counts across dataset. Equivalent pseudobulk summarization.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_snp_counts — get_snp_counts","text":"","code":"get_snp_counts(sce, variables = \"all\", target_assays = c(\"ref\", \"alt\"))"},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_snp_counts — get_snp_counts","text":"sce SingleCellExperiment object one assays variables Factors upon split counts. Defaults '' counts across entire dataset target_assays Assays sce count","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_snp_counts — get_snp_counts","text":"SingleCellExperiment object named counts assay rowData(sce) slot.","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_snp_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_snp_counts — get_snp_counts","text":"","code":"if (FALSE) { sce <- get_snp_counts(sce,   variables = c(\"all\", \"Sample\", \"Condition\"),   target_assays = c(\"ref\", \"alt\") ) }"},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tiled bins — get_tiled_bins","title":"Get tiled bins — get_tiled_bins","text":"Get tiled bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tiled bins — get_tiled_bins","text":"","code":"get_tiled_bins(bs_genome, tilewidth = 500000, select_chrs = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tiled bins — get_tiled_bins","text":"bs_genome BSgenome object tilewidth Bin size select_chrs Vector chromosomes include","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tiled bins — get_tiled_bins","text":"GRanges object bins","code":""},{"path":"https://mjz1.github.io/scatools/reference/get_tiled_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tiled bins — get_tiled_bins","text":"","code":"if (FALSE) { bins <- get_tiled_bins(BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38, tilewidth = 500000) }"},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab HMM results from returned list — grab_hmm_res","title":"Grab HMM results from returned list — grab_hmm_res","text":"Helper function parse large list HMM results","code":""},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab HMM results from returned list — grab_hmm_res","text":"","code":"grab_hmm_res(hmm_results, grab = \"best\", ncores = 1)"},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab HMM results from returned list — grab_hmm_res","text":"hmm_results hmm results multilist format grab grab (\"best\" best results; m1, m2, m3...specific multiplier) ncores number cores parallelization","code":""},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab HMM results from returned list — grab_hmm_res","text":"list cells best result\\","code":""},{"path":"https://mjz1.github.io/scatools/reference/grab_hmm_res.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grab HMM results from returned list — grab_hmm_res","text":"Note: Parallel currently disabled seems slower single core","code":""},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Cell HMMcopy — hmmcopy_singlecell","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"Runs HMMCopy single cell binned counts.","code":""},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"","code":"hmmcopy_singlecell(   chr,   start,   end,   counts,   reads,   ideal = rep(TRUE, length(counts)),   param = params_sc_hmm(),   cell_id,   multiplier = 1,   verbose = FALSE,   maxiter = 200,   n_cutoff = NULL )"},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"chr Vector chromosomes start Vector bin start positions end Vector bin end positions counts Vector bin corrected counts. ideally GC corrected counts gc_cor_modal() reads vector raw read counts per bin ideal logical vector indicating bins ideal analysis. See is_ideal_bin() param matrix parameter values columns state rows. See HMMcopy::HMMsegment() information. cell_id Cell id multiplier Ploidy multiplier verbose Print verbose maxiter maximum number iterations allows Maximum-Expectation algorithm, reduce decrease running time expense robustness. n_cutoff Cutoff number bins given state calculating true_multiplier value. Defaults 5% bins.","code":""},{"path":"https://mjz1.github.io/scatools/reference/hmmcopy_singlecell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Cell HMMcopy — hmmcopy_singlecell","text":"list following objects: bincounts Data frame bin counts copy state modal_seg Data frame genome segments mstats single row cell summary statistics df_params Data frame parameters used iteration state","code":""},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag ideal bins — is_ideal_bin","title":"Flag ideal bins — is_ideal_bin","text":"is_ideal_bin apply set bin-wise filters, based high count outliers, high low gc outliers, minimum read counts, minimum mappability, maximum allowable frequency N bases per bin.","code":""},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag ideal bins — is_ideal_bin","text":"","code":"is_ideal_bin(   counts,   gc,   n_freq,   map = NULL,   min_reads = 0,   max_N_freq = 0.05,   reads_outlier = 0.01,   gc_outlier = 0.001,   min_map = 0.9 )"},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag ideal bins — is_ideal_bin","text":"counts Vector bin counts single cell gc Vector gc content n_freq Vector bin N frequency (proportion N bases bin) map Vector bin mappability min_reads Minimum number reads consider bin max_N_freq Maximum allowable frequency N bases consider bin. Range (0, 1) reads_outlier Flag bins reads top quantile given value. Range (0, 1) gc_outlier Flag bins GC content top bottom quantule given value. Range (0, 1) min_map Minimum allowable mappability score bin. Range (0, 1)","code":""},{"path":"https://mjz1.github.io/scatools/reference/is_ideal_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag ideal bins — is_ideal_bin","text":"dataframe two columns meet valid ideal criteria","code":""},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Length normalize counts — length_normalize","title":"Length normalize counts — length_normalize","text":"default procedure impact counts bins variable length (example tail ends chromosomes).","code":""},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length normalize counts — length_normalize","text":"","code":"length_normalize(   sce,   assay_name = \"counts\",   assay_to = \"counts_lenNorm\",   binwidth,   by_factor = getmode(binwidth),   verbose = FALSE )"},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length normalize counts — length_normalize","text":"sce SCE object assay_name Name assay normalize binwidth Bin width by_factor Multiplication factor counts verbose Print verbose (TRUE/FALSE)","code":""},{"path":"https://mjz1.github.io/scatools/reference/length_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length normalize counts — length_normalize","text":"sce object counts length normalized assay(sce, 'counts_permb')","code":""},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Load atac binned depth data — load_atac_bins","title":"Load atac binned depth data — load_atac_bins","text":"Loads binned atac reads, merges cell-wise bin-wise metadata, performs QC.","code":""},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load atac binned depth data — load_atac_bins","text":"","code":"load_atac_bins(   samples,   sample.names,   ArchR_Proj = NULL,   bins = NULL,   BPPARAM = BiocParallel::bpparam(),   save_to = NULL,   verbose = FALSE,   save_as = c(\"sce\", \"adata\", \"seurat\") )"},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load atac binned depth data — load_atac_bins","text":"samples character vector containing one directory names, corresponding 10X sample. directory contain matrix file, gene/feature annotation file, barcode annotation file. Alternatively, string may contain path HDF5 file sparse matrix format generated 10X. can mixed directory names type=\"auto\". Alternatively, string may contain prefix names three-file system described , rest name file follows standard 10X output. sample.names character vector length equal samples, containing sample names store column metadata output object. NULL, file paths samples used directly. ArchR_Proj Optional: ArchR project matching cells metadata bins Optional: GRanges bins object BPPARAM Options pass bplapply data loading. Provides minor speedup loading many samples save_to File path save final output. Note: still return sce object downstream analysis. verbose Message verbosity (TRUE/FALSE) save_as IMPLEMENTED YET. Select file formats save object. Can provide multiple values directory Folder containing samples","code":""},{"path":"https://mjz1.github.io/scatools/reference/load_atac_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load atac binned depth data — load_atac_bins","text":"SingleCellExperiment object.","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Cell HMMcopy parameters — params_sc_hmm","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"Function generate parameter matrix HMMcopy::HMMsegment(). Set-default values single-cell analysis.","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"","code":"params_sc_hmm(   e = (1 - 0.000001),   strength = 1000,   mu = 0:11,   lambda = 20,   nu = 2.1,   kappa = c(100, 100, 700, 100, 25, 25, 25, 25, 25, 25, 25, 25),   m = mu,   eta = 50000,   gamma = 3,   S = 1 )"},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"e Probability extending segment, increase lengthen segments, decrase shorten segments. Range: (0, 1) strength Strength initial e suggestion, reducing allows e change, increasing makes e undefinable. Range: [0, Inf) mu Suggested median copy numbers state, change readjust classification states. Range: (-Inf, Inf) lambda Suggested precision (inversed variance) copy numbers state, increase reduce overlap states. Range: [0, Inf) nu Suggested degree freedom states, increase reduce overlap states. Range: [0, Inf) kappa Suggested distribution states. sum 1. Must length mu. m Optimal value mu, difference corresponding mu value determines elasticity mu value. .e. Set identical value mu want mu move much. eta Mobility mu, increase allow movement. Range: [0, Inf) gamma Prior shape lambda, gamma distribution. Effects flexibility lambda. S Prior scale lambda, gamma distribution. Effects flexibility lambda.","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"data frame parameters HMMcopy::HMMsegment()","code":""},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"HMMsegment two stage algorithm first runs   Expectation-Maximization algorithm find optimal set parameters   based suggested parameter inputs, allowed flexibilities.    iteratively finding optimal parameters, actual segmentation   data conducted Viterbi algorithm, finally output segmented   states.  extension hidden Markov model described Shah   et al., 2006. Parameters divided two main categories: Initial parameters: e, mu, lambda, nu, kappa Flexibility parameters: strength, m, eta, gamma, S initial parameters treated starting suggestions   parameter optimization algorithm, flexibility parameters (hyperparameters)   define much initial parameters allowed deviate   search optimal parameters. good copy number dataset, theory, given enough flexibility,   algorithm always find similar set optimal parameters regardless   initial parameters (although running times vary). reason wish manually set parameters   final segmentation process, one tune flexibility parameters   minimal values.  example, wish increase length segments,   set: suggests segments long, gives minimal   non-existant flexibility suggestion. See vignette diagrammed example:","code":"param$e <- 0.9999999999999999     param$strength <- 1e30 vignette(\"HMMcopy\")"},{"path":"https://mjz1.github.io/scatools/reference/params_sc_hmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Cell HMMcopy parameters — params_sc_hmm","text":"","code":"param <- params_sc_hmm()"},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GC Correction — perform_gc_cor","title":"Perform GC Correction — perform_gc_cor","text":"Performs GC correction using matrix cell counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GC Correction — perform_gc_cor","text":"","code":"perform_gc_cor(   mat,   gc,   valid_mat = NULL,   method = c(\"modal\", \"copykit\", \"loess\"),   ncores = 1,   verbose = FALSE,   ... )"},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GC Correction — perform_gc_cor","text":"mat Count matrix GC correction gc GC corresponding bins (rows) matrix valid_mat Matrix TRUE/FALSE valid bins. none provided defaults TRUE method Specifies type GC correction perform. One 'modal', 'copykit', 'loess' ncores Number cores use parallel backend available verbose Message verbosity (TRUE/FALSE) ... Additional arguments passed GC correction methods","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform GC Correction — perform_gc_cor","text":"Sparse matrix corrected counts","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_gc_cor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform GC Correction — perform_gc_cor","text":"Note: using modal must pass results=\"counts\" argument. Uses pbmcapply::pbmclapply() parallelization.","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform UMAP and clustering — perform_umap_clustering","title":"Perform UMAP and clustering — perform_umap_clustering","text":"Clusters copy number matrix using hdbscan.","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform UMAP and clustering — perform_umap_clustering","text":"","code":"perform_umap_clustering(   cn_matrix,   n_neighbors = 10,   min_dist = 0.1,   minPts = 30,   scale = c(\"none\", \"cells\", \"bins\", \"both\"),   log2 = FALSE,   seed = 3,   metric = \"correlation\",   verbose = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform UMAP and clustering — perform_umap_clustering","text":"cn_matrix Copy number matrix cells columns bins rows n_neighbors size local neighborhood (terms number neighboring sample points) used manifold approximation. Larger values result global views manifold, smaller values result local data preserved. general values range 2 100. min_dist effective minimum distance embedded points. Smaller values result clustered/clumped embedding nearby points manifold drawn closer together, larger values result even dispersal points. value set relative spread value, determines scale embedded points spread . scale One 'cells', 'bins', '' 'none'. Determines kind scaling done. log2 Logical: Log2 transform matrix prior plotting metric Type distance metric use find nearest neighbors. One   : \"euclidean\" (default) \"cosine\" \"manhattan\" \"hamming\" \"correlation\" (distance based Pearson correlation) \"categorical\" (see ) applies nn_method = \"annoy\" (nn_method = \"fnn\", distance metric always \"euclidean\"). X data frame matrix, multiple metrics can specified, passing list argument, name item list one metric names . value list item vector giving names integer ids columns included calculation, e.g. metric = list(euclidean = 1:4, manhattan = 5:10). metric calculation results separate fuzzy simplicial set, intersected together produce final set. Metric names can repeated. non-numeric columns removed data frame, safer use column names integer ids. Factor columns can also used specifying metric name \"categorical\". Factor columns treated different numeric columns although multiple factor columns can specified vector, factor column specified processed individually. specify non-factor column, coerced factor. given data block, may override pca pca_center arguments block, providing list one unnamed item containing column names ids, pca pca_center overrides named items, e.g. metric = list(euclidean = 1:4, manhattan = list(5:10, pca_center = FALSE)). exists allow mixed binary real-valued data included PCA applied , centering applied real-valued data (typical apply centering binary data PCA applied). verbose Logical: Message verbosity","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform UMAP and clustering — perform_umap_clustering","text":"list clustering results clustering Data frame cell cluster identities hdbscanresults Results dbscan::hdbscan umapresults Results uwot::umap tree Results ape::.phylo hdbscanresults$hc","code":""},{"path":"https://mjz1.github.io/scatools/reference/perform_umap_clustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform UMAP and clustering — perform_umap_clustering","text":"","code":"clust_results <- perform_umap_clustering(cn_matrix = assay(test_sce, \"counts\")) #> 13:40:47 UMAP embedding parameters a = 1.577 b = 0.8951 #> 13:40:47 Read 75 rows and found 310 numeric columns #> 13:40:47 Using Annoy for neighbor search, n_neighbors = 10 #> 13:40:47 Annoy build: subtracting row means for correlation #> 13:40:47 Building Annoy index with metric = correlation, n_trees = 50 #> 0%   10   20   30   40   50   60   70   80   90   100% #> [----|----|----|----|----|----|----|----|----|----| #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> * #> | #> 13:40:47 Annoy search: subtracting row means for correlation #> 13:40:47 Writing NN index file to temp file /tmp/RtmpePnXJq/file63f45968b36f #> 13:40:47 Searching Annoy index using 36 threads, search_k = 1000 #> 13:40:47 Annoy recall = 100% #> 13:40:48 Commencing smooth kNN distance calibration using 36 threads #> 13:40:49 Initializing from normalized Laplacian + noise #> 13:40:49 Commencing optimization for 500 epochs, with 1198 positive edges #> 13:40:50 Optimization finished #>   Cluster 0: 75"},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mjz1.github.io/scatools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cell Copy Number — plot_cell_cna","title":"Plot Cell Copy Number — plot_cell_cna","text":"Plot Cell Copy Number","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cell Copy Number — plot_cell_cna","text":"","code":"plot_cell_cna(sce, cell_id = NULL, assay_name = \"counts\", col_fun = NULL)"},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cell Copy Number — plot_cell_cna","text":"sce sce object cell_id Vector cell ids assay_name Name assay plot col_fun Color mapping function circlize::colorRamp2()","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_cna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cell Copy Number — plot_cell_cna","text":"ggplot object","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple cell assays together — plot_cell_multi","title":"Plot multiple cell assays together — plot_cell_multi","text":"Plot multiple cell assays together","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple cell assays together — plot_cell_multi","text":"","code":"plot_cell_multi(sce, cell_id, assays)"},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple cell assays together — plot_cell_multi","text":"sce SCE object cell_id Cell ids assays Assays plot","code":""},{"path":"https://mjz1.github.io/scatools/reference/plot_cell_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple cell assays together — plot_cell_multi","text":"List ggplot objects","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Vatrix Data — read_vartrix","title":"Read Vatrix Data — read_vartrix","text":"Reads Vartix scSNP pileups. Assumes Vartrix run -s coverage mode, outputting barcodes variants table.","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Vatrix Data — read_vartrix","text":"","code":"read_vartrix(   dir_path = NULL,   mtx_ref = NULL,   mtx_alt = NULL,   barcodes = NULL,   variants = NULL,   phased_vcf = NULL,   verbose = TRUE )"},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Vatrix Data — read_vartrix","text":"dir_path Path Vartrix outputs directory mtx_ref Path reference allele .mtx file mtx_alt Path alternate allele .mtx file barcodes Path barcodes file variants Path variants file","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Vatrix Data — read_vartrix","text":"SingleCellExperiment object","code":""},{"path":"https://mjz1.github.io/scatools/reference/read_vartrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Vatrix Data — read_vartrix","text":"dir_path provided, user must provide individual file paths file.","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Cell HMMcopy — run_sc_hmmcopy","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"conveniece wrapper function hmmcopy_singlecell() test multiple candidate multiplier (aka ploidy) values return either best result, list results downstream analysis.","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"","code":"run_sc_hmmcopy(   chr,   start,   end,   counts,   reads,   ideal = rep(TRUE, length(counts)),   param = params_sc_hmm(),   cell_id,   multipliers = 1:6,   verbose = FALSE,   maxiter = 200,   n_cutoff = NULL,   return = c(\"best\", \"all\") )"},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"chr Vector chromosomes start Vector bin start positions end Vector bin end positions counts Vector bin corrected counts. ideally GC corrected counts gc_cor_modal() reads vector raw read counts per bin ideal logical vector indicating bins ideal analysis. See is_ideal_bin() param matrix parameter values columns state rows. See HMMcopy::HMMsegment() information. cell_id Cell id multipliers Positive integer list ploidy multipliers test verbose Print verbose maxiter maximum number iterations allows Maximum-Expectation algorithm, reduce decrease running time expense robustness. n_cutoff Cutoff number bins given state calculating true_multiplier value. Defaults 5% bins. return character. One best either return result best ploidy , list results ploidies","code":""},{"path":"https://mjz1.github.io/scatools/reference/run_sc_hmmcopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Cell HMMcopy — run_sc_hmmcopy","text":"list following objects: bincounts Data frame bin counts copy state modal_seg Data frame genome segments mstats single row cell summary statistics df_params Data frame parameters used iteration state","code":""},{"path":"https://mjz1.github.io/scatools/reference/scatools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scatools: scATAC tools and utilities — scatools-package","title":"scatools: scATAC tools and utilities — scatools-package","text":"collection useful code handling scATAC data.","code":""},{"path":[]},{"path":"https://mjz1.github.io/scatools/reference/scatools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scatools: scATAC tools and utilities — scatools-package","text":"Maintainer: Matthew Zatzman matthew.zatzman@gmail.com","code":""}]
